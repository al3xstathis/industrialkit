This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-16T04:04:02.591Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.storybook/
  main.ts
  preview.ts
examples/
  next-app/
    .git/
      hooks/
        applypatch-msg.sample
        commit-msg.sample
        fsmonitor-watchman.sample
        post-update.sample
        pre-applypatch.sample
        pre-commit.sample
        pre-merge-commit.sample
        pre-push.sample
        pre-rebase.sample
        pre-receive.sample
        prepare-commit-msg.sample
        push-to-checkout.sample
        update.sample
      info/
        exclude
      logs/
        refs/
          heads/
            main
        HEAD
      refs/
        heads/
          main
      COMMIT_EDITMSG
      config
      description
      HEAD
    app/
      alarms/
        page.tsx
      devices/
        page.tsx
      logs/
        page.tsx
      metrics/
        page.tsx
      processes/
        page.tsx
      settings/
        page.tsx
      globals.css
      layout.tsx
      page.tsx
      providers.tsx
    components/
      navigation.tsx
      system-stats.tsx
    public/
      file.svg
      globe.svg
      next.svg
      vercel.svg
      window.svg
    .gitignore
    eslint.config.mjs
    next.config.ts
    package.json
    postcss.config.mjs
    README.md
    tailwind.config.ts
    tsconfig.json
scripts/
  dev.js
  generate-docs.ts
  tsconfig.json
src/
  components/
    primitive/
      accordion.tsx
      badge.tsx
      breadcrumbs.tsx
      button.tsx
      command-bar.tsx
      datagrid.tsx
      dialog.tsx
      form.tsx
      header.tsx
      input.tsx
      panel.tsx
      progress.tsx
      select.tsx
      split-view.tsx
      status-indicator.tsx
      switch.tsx
      table.tsx
      tabs.tsx
      terminal.tsx
      time-series.tsx
      toast.tsx
      tooltip.tsx
  lib/
    cn.ts
  styles/
    globals.css
  index.ts
.gitignore
.repomixignore
package.json
plugin.js
postcss.config.js
README.md
repomix.config.json
tailwind.config.js
tsconfig.json
tsup.config.ts

================================================================
Repository Files
================================================================

================
File: .storybook/main.ts
================
import type { StorybookConfig } from "@storybook/react-vite";

const config: StorybookConfig = {
  stories: ["../src/**/*.mdx", "../src/**/*.stories.@(js|jsx|mjs|ts|tsx)"],
  addons: [
    "@storybook/addon-links",
    "@storybook/addon-essentials",
    "@storybook/addon-onboarding",
    "@storybook/addon-interactions",
    "@storybook/addon-docs",
    "@storybook/addon-controls",
    {
      name: "@storybook/addon-styling",
      options: {
        postCss: true,
      },
    },
    "@storybook/addon-styling-webpack",
  ],
  framework: {
    name: "@storybook/react-vite",
    options: {},
  },
  docs: {
    autodocs: true,
    defaultName: "Documentation",
  },
};
export default config;

================
File: .storybook/preview.ts
================
import type { Preview } from "@storybook/react";
import "../src/styles/globals.css";

const preview: Preview = {
  parameters: {},
};

export default preview;

================
File: examples/next-app/.git/hooks/applypatch-msg.sample
================
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:

================
File: examples/next-app/.git/hooks/commit-msg.sample
================
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

================
File: examples/next-app/.git/hooks/fsmonitor-watchman.sample
================
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

================
File: examples/next-app/.git/hooks/post-update.sample
================
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info

================
File: examples/next-app/.git/hooks/pre-applypatch.sample
================
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:

================
File: examples/next-app/.git/hooks/pre-commit.sample
================
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

================
File: examples/next-app/.git/hooks/pre-merge-commit.sample
================
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:

================
File: examples/next-app/.git/hooks/pre-push.sample
================
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0

================
File: examples/next-app/.git/hooks/pre-rebase.sample
================
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

================
File: examples/next-app/.git/hooks/pre-receive.sample
================
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi

================
File: examples/next-app/.git/hooks/prepare-commit-msg.sample
================
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi

================
File: examples/next-app/.git/hooks/push-to-checkout.sample
================
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi

================
File: examples/next-app/.git/hooks/update.sample
================
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0

================
File: examples/next-app/.git/info/exclude
================
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~

================
File: examples/next-app/.git/logs/refs/heads/main
================
0000000000000000000000000000000000000000 7416ee4cfcc4b788115db5ff317c8887f76035bf Alex <stathis.alexander@gmail.com> 1736868467 -0500	commit (initial): Initial commit from Create Next App

================
File: examples/next-app/.git/logs/HEAD
================
0000000000000000000000000000000000000000 7416ee4cfcc4b788115db5ff317c8887f76035bf Alex <stathis.alexander@gmail.com> 1736868467 -0500	commit (initial): Initial commit from Create Next App

================
File: examples/next-app/.git/refs/heads/main
================
7416ee4cfcc4b788115db5ff317c8887f76035bf

================
File: examples/next-app/.git/COMMIT_EDITMSG
================
Initial commit from Create Next App

================
File: examples/next-app/.git/config
================
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true

================
File: examples/next-app/.git/description
================
Unnamed repository; edit this file 'description' to name the repository.

================
File: examples/next-app/.git/HEAD
================
ref: refs/heads/main

================
File: examples/next-app/app/alarms/page.tsx
================
"use client";
import {
  Accordion,
  AccordionItem,
  Badge,
  Button,
  DataGrid,
  Form,
  FormField,
  FormSection,
  Input,
  NumericInput,
  Option,
  Panel,
  PanelRow,
  Select,
  Switch,
  Tab,
  TabList,
  TabPanel,
  Tabs,
  TimeSeries,
} from "industrydb";
import { useState } from "react";

// Helper function to generate sample time series data
function generateTimeData(points: number) {
  return Array.from({ length: points }, (_, i) => ({
    timestamp: new Date(Date.now() - (points - i) * 60000),
    value: Math.random() * 100,
  }));
}

export default function AlarmsPage() {
  const [activeTab, setActiveTab] = useState("active");

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <div className="space-y-1">
          <h1 className="text-xl font-bold">System Alarms</h1>
          <p className="text-sm text-gray-500">
            Monitor and manage system alerts and notifications
          </p>
        </div>
        <div className="flex items-center gap-4">
          <Badge variant="solid" color="red">
            5 Critical
          </Badge>
          <Badge variant="solid" color="yellow">
            3 Warning
          </Badge>
          <Button variant="primary">Acknowledge All</Button>
        </div>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabList>
          <Tab value="active">Active Alarms</Tab>
          <Tab value="history">Alarm History</Tab>
          <Tab value="analytics">Analytics</Tab>
          <Tab value="settings">Settings</Tab>
        </TabList>

        {/* Active Alarms Panel */}
        <TabPanel value="active">
          <DataGrid
            columns={[
              { key: "id", header: "ID", width: "100px" },
              {
                key: "severity",
                header: "Severity",
                width: "120px",
                sortable: true,
                render: (value) => (
                  <Badge
                    variant="solid"
                    color={
                      value === "Critical"
                        ? "red"
                        : value === "Warning"
                          ? "yellow"
                          : "blue"
                    }
                  >
                    {value}
                  </Badge>
                ),
              },
              { key: "message", header: "Message", sortable: true },
              {
                key: "source",
                header: "Source",
                width: "150px",
                sortable: true,
              },
              {
                key: "timestamp",
                header: "Time",
                width: "200px",
                sortable: true,
              },
              {
                key: "acknowledged",
                header: "Status",
                width: "120px",
                render: (value) => (
                  <Badge variant="outline" color={value ? "green" : "yellow"}>
                    {value ? "Acknowledged" : "New"}
                  </Badge>
                ),
              },
            ]}
            data={[
              {
                id: "ALM001",
                severity: "Critical",
                message: "CPU Usage exceeded threshold (95%)",
                source: "System Monitor",
                timestamp: "2024-01-15 10:30:00",
                acknowledged: false,
              },
              {
                id: "ALM002",
                severity: "Warning",
                message: "Memory usage approaching limit",
                source: "Resource Monitor",
                timestamp: "2024-01-15 10:25:00",
                acknowledged: true,
              },
              {
                id: "ALM003",
                severity: "Critical",
                message: "Database connection failed",
                source: "Database Service",
                timestamp: "2024-01-15 10:20:00",
                acknowledged: false,
              },
              {
                id: "ALM004",
                severity: "Warning",
                message: "High network latency detected",
                source: "Network Monitor",
                timestamp: "2024-01-15 10:15:00",
                acknowledged: false,
              },
              {
                id: "ALM005",
                severity: "Critical",
                message: "Security breach attempt detected",
                source: "Security Monitor",
                timestamp: "2024-01-15 10:10:00",
                acknowledged: false,
              },
            ]}
            selectable
          />
        </TabPanel>

        {/* Alarm History Panel */}
        <TabPanel value="history">
          <div className="space-y-4">
            <div className="flex gap-4">
              <Input
                placeholder="Search alarms..."
                prefix="🔍"
                className="w-64"
              />
              <Select prefix="Filter" className="w-48">
                <Option value="all">All Severities</Option>
                <Option value="critical">Critical</Option>
                <Option value="warning">Warning</Option>
                <Option value="info">Info</Option>
              </Select>
              <Button variant="default">Export</Button>
            </div>

            <Accordion>
              <AccordionItem value="today" title="Today" subtitle="8 alarms">
                <DataGrid
                  columns={[
                    { key: "time", header: "Time", width: "100px" },
                    { key: "severity", header: "Severity", width: "120px" },
                    { key: "message", header: "Message" },
                    { key: "duration", header: "Duration", width: "100px" },
                  ]}
                  data={[
                    {
                      time: "10:30:00",
                      severity: "Critical",
                      message: "CPU Usage exceeded threshold (95%)",
                      duration: "5m 30s",
                    },
                    {
                      time: "10:25:00",
                      severity: "Warning",
                      message: "Memory usage approaching limit",
                      duration: "10m 15s",
                    },
                  ]}
                />
              </AccordionItem>
              <AccordionItem
                value="yesterday"
                title="Yesterday"
                subtitle="12 alarms"
              >
                {/* Similar DataGrid for yesterday's alarms */}
              </AccordionItem>
            </Accordion>
          </div>
        </TabPanel>

        {/* Analytics Panel */}
        <TabPanel value="analytics">
          <div className="space-y-4">
            <TimeSeries
              data={[generateTimeData(50), generateTimeData(50)]}
              labels={["Critical", "Warning"]}
              height={300}
              title="Alarm Frequency"
              yAxisLabel="Count"
            />

            <div className="grid grid-cols-3 gap-4">
              <Panel variant="bordered">
                <PanelRow label="Total Alarms" value="156" />
                <PanelRow label="Critical" value="23" />
                <PanelRow label="Warning" value="45" />
                <PanelRow label="Info" value="88" />
              </Panel>
              <Panel variant="bordered">
                <PanelRow label="Avg Response Time" value="5m 30s" />
                <PanelRow label="Max Response Time" value="45m 12s" />
                <PanelRow label="Min Response Time" value="30s" />
              </Panel>
              <Panel variant="bordered">
                <PanelRow label="Top Source" value="System Monitor" />
                <PanelRow label="Most Common" value="CPU Usage" />
                <PanelRow label="Peak Time" value="14:00-15:00" />
              </Panel>
            </div>
          </div>
        </TabPanel>

        {/* Settings Panel */}
        <TabPanel value="settings">
          <Form className="max-w-2xl">
            <FormSection
              title="Notification Settings"
              description="Configure how and when you receive alarm notifications"
            >
              <FormField
                label="Email Notifications"
                hint="Receive alarm notifications via email"
              >
                <Select>
                  <Option value="all">All Alarms</Option>
                  <Option value="critical">Critical Only</Option>
                  <Option value="none">Disabled</Option>
                </Select>
              </FormField>

              <FormField
                label="SMS Notifications"
                hint="Receive urgent alarms via SMS"
              >
                <Select>
                  <Option value="critical">Critical Only</Option>
                  <Option value="none">Disabled</Option>
                </Select>
              </FormField>

              <FormField
                label="Notification Schedule"
                hint="Define when notifications should be sent"
              >
                <Select>
                  <Option value="always">24/7</Option>
                  <Option value="business">Business Hours</Option>
                  <Option value="custom">Custom Schedule</Option>
                </Select>
              </FormField>
            </FormSection>

            <FormSection
              title="Threshold Settings"
              description="Configure alarm triggering thresholds"
            >
              <FormField
                label="CPU Usage Threshold"
                hint="Trigger alarm when CPU usage exceeds this value"
              >
                <NumericInput
                  min={0}
                  max={100}
                  step={5}
                  defaultValue={90}
                  suffix="%"
                />
              </FormField>

              <FormField
                label="Memory Usage Threshold"
                hint="Trigger alarm when memory usage exceeds this value"
              >
                <NumericInput
                  min={0}
                  max={100}
                  step={5}
                  defaultValue={85}
                  suffix="%"
                />
              </FormField>

              <FormField
                label="Network Latency Threshold"
                hint="Trigger alarm when network latency exceeds this value"
              >
                <NumericInput
                  min={0}
                  max={1000}
                  step={10}
                  defaultValue={100}
                  suffix="ms"
                />
              </FormField>
            </FormSection>

            <FormSection
              title="Auto-Resolution"
              description="Configure automatic alarm resolution settings"
            >
              <FormField
                label="Auto-acknowledge alarms"
                hint="Automatically acknowledge alarms when the condition returns to normal"
              >
                <Switch />
              </FormField>

              <FormField
                label="Resolution Delay"
                hint="Wait time before auto-resolving alarms"
              >
                <NumericInput
                  min={0}
                  max={60}
                  step={1}
                  defaultValue={5}
                  suffix="minutes"
                />
              </FormField>
            </FormSection>

            <div className="flex justify-end gap-2">
              <Button variant="default">Cancel</Button>
              <Button variant="primary">Save Changes</Button>
            </div>
          </Form>
        </TabPanel>
      </Tabs>
    </div>
  );
}

================
File: examples/next-app/app/devices/page.tsx
================
// examples/next-app/app/devices/page.tsx
"use client";
import {
  Badge,
  Button,
  DataGrid,
  Dialog,
  Form,
  FormField,
  FormSection,
  Input,
  Meter,
  Option,
  Panel,
  PanelRow,
  Select,
  SplitView,
  SplitViewPanel,
  StatusIndicator,
  StatusType,
  Switch,
  Terminal,
  TimeSeries,
} from "industrydb";
import { useState } from "react";

// Helper for sample data
function generateTimeData(points: number) {
  return Array.from({ length: points }, (_, i) => ({
    timestamp: new Date(Date.now() - (points - i) * 60000),
    value: Math.random() * 100,
  }));
}

export default function DevicesPage() {
  const [selectedDevice, setSelectedDevice] = useState<string | null>(null);
  const [showAddDevice, setShowAddDevice] = useState(false);

  console.log(selectedDevice);
  const devices = [
    {
      id: "PLC001",
      name: "Main Production PLC",
      type: "Programmable Logic Controller",
      status: "success",
      ip: "192.168.1.100",
      location: "Production Floor",
      lastSeen: "2024-01-15 11:30:00",
      firmware: "v2.1.0",
      cpu: 45,
      memory: 62,
      temperature: 38,
    },
    {
      id: "SNS002",
      name: "Temperature Sensor Array",
      type: "Sensor Network",
      status: "warning",
      ip: "192.168.1.101",
      location: "Storage Area",
      lastSeen: "2024-01-15 11:29:00",
      firmware: "v1.8.5",
      cpu: 28,
      memory: 45,
      temperature: 42,
    },
    {
      id: "RTR003",
      name: "Industrial Router",
      type: "Network Equipment",
      status: "error",
      ip: "192.168.1.1",
      location: "Control Room",
      lastSeen: "2024-01-15 11:25:00",
      firmware: "v3.0.2",
      cpu: 88,
      memory: 75,
      temperature: 55,
    },
  ];

  const deviceLogs = [
    "> Device PLC001 reported high temperature warning",
    "> Firmware update available for SNS002",
    "> RTR003 connection restored after network interruption",
    "> Automatic backup completed for PLC001",
    "> Temperature Sensor Array calibration check scheduled",
  ];

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <div className="space-y-1">
          <h1 className="text-xl font-bold">Device Management</h1>
          <p className="text-sm text-gray-500">
            Monitor and manage connected industrial equipment
          </p>
        </div>
        <div className="flex items-center gap-4">
          <Badge variant="solid" color="green">
            {devices.filter((d) => d.status === "success").length} Online
          </Badge>
          <Badge variant="solid" color="red">
            {devices.filter((d) => d.status === "error").length} Error
          </Badge>
          <Button variant="primary" onClick={() => setShowAddDevice(true)}>
            Add Device
          </Button>
        </div>
      </div>

      <SplitView
        first={
          <SplitViewPanel title="Device List">
            <div className="space-y-4">
              <div className="flex gap-4">
                <Input
                  placeholder="Search devices..."
                  prefix="🔍"
                  className="w-64"
                />
                <Select prefix="Type" className="w-48">
                  <Option value="all">All Types</Option>
                  <Option value="plc">PLC</Option>
                  <Option value="sensor">Sensors</Option>
                  <Option value="network">Network</Option>
                </Select>
              </div>

              <DataGrid
                columns={[
                  { key: "id", header: "ID", width: "100px" },
                  { key: "name", header: "Name" },
                  {
                    key: "status",
                    header: "Status",
                    width: "120px",
                    render: (value) => (
                      <StatusIndicator status={value} showLabel />
                    ),
                  },
                  { key: "type", header: "Type", width: "150px" },
                  { key: "location", header: "Location", width: "150px" },
                ]}
                data={devices}
                selectable
                selectMode="single"
                onRowSelect={([device]) =>
                  setSelectedDevice(device?.id ?? null)
                }
              />
            </div>
          </SplitViewPanel>
        }
        second={
          <SplitViewPanel title="Device Details">
            {selectedDevice ? (
              <div className="space-y-4">
                {/* Device Info */}
                <Panel variant="bordered">
                  <PanelRow
                    label="Status"
                    value={
                      <StatusIndicator
                        status={
                          (devices.find((d) => d.id === selectedDevice)
                            ?.status ?? "idle") as StatusType
                        }
                        showLabel
                      />
                    }
                  />
                  <PanelRow
                    label="IP Address"
                    value={devices.find((d) => d.id === selectedDevice)?.ip}
                  />
                  <PanelRow
                    label="Firmware"
                    value={
                      devices.find((d) => d.id === selectedDevice)?.firmware
                    }
                  />
                  <PanelRow
                    label="Last Seen"
                    value={
                      devices.find((d) => d.id === selectedDevice)?.lastSeen
                    }
                  />
                </Panel>

                {/* Device Metrics */}
                <Panel variant="bordered" title="Resource Usage">
                  <PanelRow
                    label="CPU Usage"
                    value={
                      <Meter
                        value={
                          devices.find((d) => d.id === selectedDevice)?.cpu ?? 0
                        }
                        max={100}
                      />
                    }
                  />
                  <PanelRow
                    label="Memory"
                    value={
                      <Meter
                        value={
                          devices.find((d) => d.id === selectedDevice)
                            ?.memory ?? 0
                        }
                        max={100}
                      />
                    }
                  />
                  <PanelRow
                    label="Temperature"
                    value={
                      <Meter
                        value={
                          devices.find((d) => d.id === selectedDevice)
                            ?.temperature ?? 0
                        }
                        max={100}
                      />
                    }
                  />
                </Panel>

                {/* Performance Graph */}
                <TimeSeries
                  title="Device Performance"
                  data={[generateTimeData(50), generateTimeData(50)]}
                  labels={["Response Time", "Throughput"]}
                  height={200}
                />

                {/* Device Logs */}
                <Terminal
                  title="DEVICE_LOGS"
                  lines={deviceLogs}
                  maxHeight="200px"
                />
              </div>
            ) : (
              <div className="flex h-full items-center justify-center text-gray-500">
                Select a device to view details
              </div>
            )}
          </SplitViewPanel>
        }
      />

      {/* Add Device Dialog */}
      <Dialog
        open={showAddDevice}
        onClose={() => setShowAddDevice(false)}
        title="Add New Device"
        actions={<Button variant="primary">Add Device</Button>}
      >
        <Form className="space-y-4">
          <FormSection title="Device Information">
            <FormField label="Device Name" required>
              <Input placeholder="Enter device name" />
            </FormField>

            <FormField label="Device Type" required>
              <Select>
                <Option value="plc">PLC</Option>
                <Option value="sensor">Sensor</Option>
                <Option value="network">Network Equipment</Option>
                <Option value="other">Other</Option>
              </Select>
            </FormField>

            <FormField label="IP Address" required>
              <Input
                placeholder="192.168.1.100"
                pattern="\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}"
              />
            </FormField>

            <FormField label="Location">
              <Input placeholder="Enter device location" />
            </FormField>
          </FormSection>

          <FormSection title="Configuration">
            <FormField>
              <Switch label="Enable DHCP" />
            </FormField>

            <FormField label="Monitoring Interval">
              <Select>
                <Option value="10">10 seconds</Option>
                <Option value="30">30 seconds</Option>
                <Option value="60">1 minute</Option>
              </Select>
            </FormField>
          </FormSection>
        </Form>
      </Dialog>
    </div>
  );
}

================
File: examples/next-app/app/logs/page.tsx
================
// examples/next-app/app/logs/page.tsx
"use client";
import {
  Accordion,
  AccordionItem,
  Badge,
  Breadcrumbs,
  Button,
  CommandBar,
  DataGrid,
  Input,
  Option,
  Panel,
  PanelRow,
  Select,
  SplitView,
  SplitViewPanel,
  Terminal,
  TimeSeries,
  useToast,
} from "industrydb";
import { useState } from "react";

// Sample log entry type
type LogEntry = {
  id: string;
  timestamp: string;
  level: "INFO" | "WARN" | "ERROR" | "DEBUG";
  source: string;
  message: string;
  details?: string;
  trace?: string;
};

// Helper for sample data
function generateTimeData(points: number) {
  return Array.from({ length: points }, (_, i) => ({
    timestamp: new Date(Date.now() - (points - i) * 60000),
    value: Math.random() * 100,
  }));
}

export default function LogsPage() {
  const { showToast } = useToast();
  const [selectedLog, setSelectedLog] = useState<LogEntry | null>(null);
  const [logFilter, setLogFilter] = useState("all");
  const [isLiveUpdate, setIsLiveUpdate] = useState(true);

  // Sample logs data
  const logs: LogEntry[] = [
    {
      id: "LOG001",
      timestamp: "2024-01-15 11:30:00",
      level: "ERROR",
      source: "Authentication Service",
      message: "Failed login attempt detected",
      details: "Multiple failed attempts from IP: 192.168.1.100",
      trace:
        "Error: Authentication failed\n  at AuthService.validate (/src/auth.ts:42)\n  at LoginController.attempt (/src/controllers/login.ts:23)",
    },
    {
      id: "LOG002",
      timestamp: "2024-01-15 11:29:30",
      level: "WARN",
      source: "Database Service",
      message: "High query latency detected",
      details: "Query execution time exceeded 1000ms threshold",
    },
    {
      id: "LOG003",
      timestamp: "2024-01-15 11:29:00",
      level: "INFO",
      source: "System Monitor",
      message: "Backup process completed successfully",
      details: "Backup size: 2.5GB, Duration: 5m 30s",
    },
    {
      id: "LOG004",
      timestamp: "2024-01-15 11:28:30",
      level: "DEBUG",
      source: "Process Manager",
      message: "Worker pool scaled up",
      details: "Increased workers from 5 to 8 due to high load",
    },
  ];

  // Live log simulation
  const terminalLogs = [
    "> [11:30:00] ERROR: Failed login attempt detected",
    "> [11:29:30] WARN: High query latency detected",
    "> [11:29:00] INFO: Backup process completed successfully",
    "> [11:28:30] DEBUG: Worker pool scaled up",
    "> [11:28:00] INFO: System health check completed",
  ];

  return (
    <div className="space-y-4">
      <CommandBar
        actions={[
          {
            key: "F5",
            label: "Refresh",
            onClick: () => {
              showToast({
                type: "info",
                title: "Refreshing Logs",
                message: "Fetching latest log entries...",
              });
            },
          },
          {
            key: "F6",
            label: "Export",
            onClick: () => {
              showToast({
                type: "success",
                title: "Export Started",
                message: "Preparing log export...",
              });
            },
          },
          {
            key: "F7",
            label: "Clear",
            onClick: () => {
              showToast({
                type: "warning",
                title: "Clear Logs",
                message: "Are you sure you want to clear all logs?",
              });
            },
          },
        ]}
        status={[
          {
            label: "Live Update",
            value: isLiveUpdate ? "Enabled" : "Disabled",
          },
          { label: "Buffer Size", value: "1024 entries" },
        ]}
      />

      <div className="flex items-center justify-between">
        <div className="space-y-1">
          <Breadcrumbs
            items={[
              { label: "System", href: "/" },
              { label: "Logs", href: "/logs" },
              { label: logFilter.toUpperCase() },
            ]}
          />
          <div className="flex items-center gap-4">
            <Badge variant="solid" color="red">
              {logs.filter((log) => log.level === "ERROR").length} Errors
            </Badge>
            <Badge variant="solid" color="yellow">
              {logs.filter((log) => log.level === "WARN").length} Warnings
            </Badge>
            <Badge variant="solid" color="blue">
              {logs.filter((log) => log.level === "INFO").length} Info
            </Badge>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <Button
            variant={isLiveUpdate ? "primary" : "default"}
            onClick={() => setIsLiveUpdate(!isLiveUpdate)}
          >
            {isLiveUpdate ? "■ Stop" : "▶ Start"} Live Update
          </Button>
        </div>
      </div>

      <SplitView
        first={
          <SplitViewPanel title="Log Entries">
            <div className="space-y-4">
              <div className="flex gap-4">
                <Input
                  placeholder="Search logs..."
                  prefix="🔍"
                  className="w-64"
                />
                <Select
                  value={logFilter}
                  onChange={(e) => setLogFilter(e.target.value)}
                  className="w-48"
                >
                  <Option value="all">All Levels</Option>
                  <Option value="error">Errors</Option>
                  <Option value="warn">Warnings</Option>
                  <Option value="info">Info</Option>
                  <Option value="debug">Debug</Option>
                </Select>
                <Select className="w-48">
                  <Option value="15m">Last 15 minutes</Option>
                  <Option value="1h">Last hour</Option>
                  <Option value="24h">Last 24 hours</Option>
                  <Option value="7d">Last 7 days</Option>
                </Select>
              </div>

              <DataGrid
                selectable
                columns={[
                  { key: "timestamp", header: "Time", width: "150px" },
                  {
                    key: "level",
                    header: "Level",
                    width: "100px",
                    render: (value) => (
                      <Badge
                        variant="solid"
                        color={
                          value === "ERROR"
                            ? "red"
                            : value === "WARN"
                              ? "yellow"
                              : value === "INFO"
                                ? "blue"
                                : "gray"
                        }
                      >
                        {value}
                      </Badge>
                    ),
                  },
                  { key: "source", header: "Source", width: "200px" },
                  { key: "message", header: "Message" },
                ]}
                data={logs}
                selectMode="single"
                onRowSelect={([log]) => setSelectedLog(log as LogEntry)}
              />
            </div>
          </SplitViewPanel>
        }
        second={
          <SplitView
            direction="vertical"
            defaultSplit={60}
            first={
              <SplitViewPanel title="Log Details">
                {selectedLog ? (
                  <div className="space-y-4">
                    <Panel variant="bordered">
                      <PanelRow label="Time" value={selectedLog.timestamp} />
                      <PanelRow
                        label="Level"
                        value={
                          <Badge
                            variant="solid"
                            color={
                              selectedLog.level === "ERROR"
                                ? "red"
                                : selectedLog.level === "WARN"
                                  ? "yellow"
                                  : selectedLog.level === "INFO"
                                    ? "blue"
                                    : "gray"
                            }
                          >
                            {selectedLog.level}
                          </Badge>
                        }
                      />
                      <PanelRow label="Source" value={selectedLog.source} />
                      <PanelRow label="Message" value={selectedLog.message} />
                      {selectedLog.details && (
                        <PanelRow label="Details" value={selectedLog.details} />
                      )}
                    </Panel>
                    {selectedLog.trace && (
                      <Terminal
                        title="STACK_TRACE"
                        lines={selectedLog.trace.split("\n")}
                        maxHeight="200px"
                      />
                    )}
                  </div>
                ) : (
                  <div className="flex h-full items-center justify-center text-gray-500">
                    Select a log entry to view details
                  </div>
                )}
              </SplitViewPanel>
            }
            second={
              <SplitViewPanel title="Live Log Stream">
                <Terminal
                  title="LOG_STREAM"
                  lines={terminalLogs}
                  loading={isLiveUpdate}
                />
              </SplitViewPanel>
            }
          />
        }
      />

      <Accordion>
        <AccordionItem
          value="stats"
          title="Log Analytics"
          subtitle="Error frequency and patterns"
        >
          <div className="space-y-4">
            <TimeSeries
              title="Log Frequency"
              data={[
                generateTimeData(50), // Errors
                generateTimeData(50), // Warnings
              ]}
              labels={["Errors", "Warnings"]}
              height={200}
              yAxisLabel="Count"
            />
            <div className="grid grid-cols-3 gap-4">
              <Panel variant="bordered">
                <PanelRow label="Total Logs" value="1,234" />
                <PanelRow label="Errors" value="23" />
                <PanelRow label="Warnings" value="45" />
                <PanelRow label="Info" value="1,166" />
              </Panel>
              <Panel variant="bordered">
                <PanelRow label="Peak Time" value="14:00-15:00" />
                <PanelRow label="Quiet Time" value="03:00-04:00" />
                <PanelRow label="Avg per Hour" value="51.4" />
              </Panel>
              <Panel variant="bordered">
                <PanelRow label="Top Source" value="Authentication Service" />
                <PanelRow label="Most Common" value="Failed login attempt" />
                <PanelRow label="Log Size" value="2.5 GB" />
              </Panel>
            </div>
          </div>
        </AccordionItem>
      </Accordion>
    </div>
  );
}

================
File: examples/next-app/app/metrics/page.tsx
================
"use client";
import {
  Panel,
  PanelRow,
  SplitView,
  SplitViewPanel,
  TimeSeries,
} from "industrydb";

// Helper function to generate sample time series data
function generateTimeData(points: number) {
  return Array.from({ length: points }, (_, i) => ({
    timestamp: new Date(Date.now() - (points - i) * 60000),
    value: Math.random() * 100,
  }));
}

export default function MetricsPage() {
  return (
    <div className="space-y-4">
      <h1 className="text-xl font-bold">System Metrics</h1>

      <SplitView
        direction="vertical"
        first={
          <SplitViewPanel title="Resource Usage">
            <div className="space-y-4">
              <TimeSeries
                title="CPU & Memory Usage"
                data={[generateTimeData(50), generateTimeData(50)]}
                labels={["CPU", "Memory"]}
                height={200}
                yAxisLabel="Percentage"
              />
              <TimeSeries
                title="Network Traffic"
                data={generateTimeData(50)}
                labels={["Network"]}
                height={200}
                yAxisLabel="MB/s"
              />
            </div>
          </SplitViewPanel>
        }
        second={
          <SplitViewPanel title="Performance Metrics">
            <div className="grid grid-cols-2 gap-4">
              <Panel variant="bordered">
                <PanelRow label="Requests/sec" value="1,234" />
                <PanelRow label="Avg Response Time" value="45ms" />
                <PanelRow label="Error Rate" value="0.01%" />
              </Panel>
              <Panel variant="bordered">
                <PanelRow label="Active Users" value="567" />
                <PanelRow label="Active Sessions" value="890" />
                <PanelRow label="Cache Hit Rate" value="95%" />
              </Panel>
            </div>
          </SplitViewPanel>
        }
      />
    </div>
  );
}

================
File: examples/next-app/app/processes/page.tsx
================
"use client";
import { Button, DataGrid, StatusIndicator } from "industrydb";

export default function ProcessesPage() {
  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h1 className="text-xl font-bold">Process Management</h1>
        <Button variant="primary">New Process</Button>
      </div>

      <DataGrid
        columns={[
          { key: "id", header: "PID", width: "100px" },
          { key: "name", header: "Process Name" },
          {
            key: "status",
            header: "Status",
            width: "120px",
            render: (value) => <StatusIndicator status={value} showLabel />,
          },
          { key: "cpu", header: "CPU Usage", width: "100px" },
          { key: "memory", header: "Memory", width: "100px" },
          { key: "started", header: "Started", width: "200px" },
        ]}
        data={[
          {
            id: "P1001",
            name: "Data Collection Service",
            status: "processing",
            cpu: "45%",
            memory: "128MB",
            started: "2024-01-15 08:00:00",
          },
          {
            id: "P1002",
            name: "Monitoring Agent",
            status: "success",
            cpu: "12%",
            memory: "64MB",
            started: "2024-01-15 08:00:00",
          },
          {
            id: "P1003",
            name: "Alert Handler",
            status: "warning",
            cpu: "78%",
            memory: "256MB",
            started: "2024-01-15 08:00:00",
          },
        ]}
        selectable
      />
    </div>
  );
}

================
File: examples/next-app/app/settings/page.tsx
================
// examples/next-app/app/settings/page.tsx
"use client";
import {
  Accordion,
  AccordionItem,
  Badge,
  Button,
  Dialog,
  Form,
  FormField,
  FormGroup,
  FormSection,
  Input,
  NumericInput,
  Option,
  Panel,
  PanelRow,
  Select,
  Switch,
  Tab,
  TabList,
  TabPanel,
  Tabs,
  Terminal,
  useToast,
} from "industrydb";
import { useState } from "react";

export default function SettingsPage() {
  const { showToast } = useToast();
  const [showBackupDialog, setShowBackupDialog] = useState(false);
  const [showResetDialog, setShowResetDialog] = useState(false);

  // Sample system information
  const systemInfo = {
    version: "2.5.0",
    uptime: "15 days, 7 hours",
    lastUpdate: "2024-01-10 15:30:00",
    environment: "Production",
    nodeVersion: "v20.10.0",
    database: "PostgreSQL 16.1",
    os: "Linux 6.1.0",
  };

  return (
    <div className="max-w-4xl space-y-6">
      <div className="flex items-center justify-between">
        <div className="space-y-1">
          <h1 className="text-xl font-bold">System Settings</h1>
          <p className="text-sm text-gray-500">
            Configure system preferences and maintenance options
          </p>
        </div>
        <Badge variant="solid" color="green">
          Version {systemInfo.version}
        </Badge>
      </div>

      <Tabs defaultValue="general">
        <TabList>
          <Tab value="general">General</Tab>
          <Tab value="security">Security</Tab>
          <Tab value="networking">Networking</Tab>
          <Tab value="maintenance">Maintenance</Tab>
          <Tab value="about">About</Tab>
        </TabList>

        {/* General Settings */}
        <TabPanel value="general">
          <Form>
            <FormSection
              title="Display Settings"
              description="Configure the appearance and behavior of the interface"
            >
              <FormGroup columns={2}>
                <FormField label="Theme">
                  <Select defaultValue="system">
                    <Option value="light">Light Mode</Option>
                    <Option value="dark">Dark Mode</Option>
                    <Option value="system">System Default</Option>
                  </Select>
                </FormField>
                <FormField label="Terminal Style">
                  <Select defaultValue="default">
                    <Option value="default">Standard</Option>
                    <Option value="terminal">Classic Terminal</Option>
                  </Select>
                </FormField>
                <FormField label="Date Format">
                  <Select defaultValue="iso">
                    <Option value="iso">ISO (2024-01-15)</Option>
                    <Option value="us">US (01/15/2024)</Option>
                    <Option value="eu">EU (15/01/2024)</Option>
                  </Select>
                </FormField>
                <FormField label="Time Format">
                  <Select defaultValue="24">
                    <Option value="24">24-hour</Option>
                    <Option value="12">12-hour</Option>
                  </Select>
                </FormField>
              </FormGroup>
            </FormSection>

            <FormSection
              title="Notification Preferences"
              description="Configure system notifications and alerts"
            >
              <FormGroup columns={2}>
                <FormField>
                  <Switch label="Enable notifications" defaultChecked />
                </FormField>
                <FormField>
                  <Switch label="Enable sound" defaultChecked />
                </FormField>
                <FormField>
                  <Switch label="Always show critical" defaultChecked />
                </FormField>
                <FormField>
                  <Switch label="Show maintenance" defaultChecked />
                </FormField>
              </FormGroup>
            </FormSection>

            <FormSection
              title="Data Display"
              description="Configure how data is displayed and updated"
            >
              <FormGroup columns={2}>
                <FormField label="Auto-refresh Interval">
                  <NumericInput
                    min={5}
                    max={60}
                    step={5}
                    defaultValue={15}
                    suffix="seconds"
                  />
                </FormField>
                <FormField label="Data Retention">
                  <NumericInput
                    min={1}
                    max={90}
                    defaultValue={30}
                    suffix="days"
                  />
                </FormField>
                <FormField label="Table Page Size">
                  <Select defaultValue="25">
                    <Option value="10">10 rows</Option>
                    <Option value="25">25 rows</Option>
                    <Option value="50">50 rows</Option>
                    <Option value="100">100 rows</Option>
                  </Select>
                </FormField>
                <FormField label="Graph Resolution">
                  <Select defaultValue="medium">
                    <Option value="low">Low (1 min)</Option>
                    <Option value="medium">Medium (30 sec)</Option>
                    <Option value="high">High (10 sec)</Option>
                  </Select>
                </FormField>
              </FormGroup>
            </FormSection>

            <div className="flex justify-end gap-2">
              <Button variant="default">Reset</Button>
              <Button
                variant="primary"
                onClick={() =>
                  showToast({
                    type: "success",
                    title: "Settings Saved",
                    message: "Your preferences have been updated.",
                  })
                }
              >
                Save Changes
              </Button>
            </div>
          </Form>
        </TabPanel>

        {/* Security Settings */}
        <TabPanel value="security">
          <Form>
            <FormSection
              title="Authentication"
              description="Configure security and access settings"
            >
              <FormGroup columns={2}>
                <FormField label="Session Timeout">
                  <NumericInput
                    min={5}
                    max={240}
                    defaultValue={30}
                    suffix="minutes"
                  />
                </FormField>
                <FormField label="Max Login Attempts">
                  <NumericInput min={3} max={10} defaultValue={5} />
                </FormField>
                <FormField label="Password Expiry">
                  <NumericInput
                    min={30}
                    max={180}
                    defaultValue={90}
                    suffix="days"
                  />
                </FormField>
                <FormField label="2FA Method">
                  <Select defaultValue="app">
                    <Option value="app">Authenticator App</Option>
                    <Option value="sms">SMS</Option>
                    <Option value="email">Email</Option>
                  </Select>
                </FormField>
              </FormGroup>

              <FormField label="IP Whitelist">
                <Input placeholder="Enter comma-separated IP addresses" />
              </FormField>

              <FormGroup columns={2}>
                <FormField>
                  <Switch label="Require HTTPS" defaultChecked />
                </FormField>
                <FormField>
                  <Switch label="Enable API keys" defaultChecked />
                </FormField>
              </FormGroup>
            </FormSection>

            <FormSection
              title="Audit Log"
              description="Configure system audit logging"
            >
              <FormGroup columns={2}>
                <FormField label="Audit Log Retention">
                  <NumericInput
                    min={30}
                    max={365}
                    defaultValue={90}
                    suffix="days"
                  />
                </FormField>
                <FormField label="Log Level">
                  <Select defaultValue="info">
                    <Option value="debug">Debug</Option>
                    <Option value="info">Info</Option>
                    <Option value="warn">Warning</Option>
                    <Option value="error">Error</Option>
                  </Select>
                </FormField>
              </FormGroup>
            </FormSection>

            <div className="flex justify-end gap-2">
              <Button variant="primary">Save Security Settings</Button>
            </div>
          </Form>
        </TabPanel>

        {/* Networking Settings */}
        <TabPanel value="networking">
          <Form>
            <FormSection
              title="Network Configuration"
              description="Configure network and connectivity settings"
            >
              <FormGroup columns={2}>
                <FormField label="HTTP Port">
                  <NumericInput min={80} max={65535} defaultValue={8080} />
                </FormField>
                <FormField label="HTTPS Port">
                  <NumericInput min={443} max={65535} defaultValue={443} />
                </FormField>
                <FormField label="Proxy">
                  <Input placeholder="http://proxy.example.com:8080" />
                </FormField>
                <FormField label="API Rate Limit">
                  <NumericInput
                    min={100}
                    max={10000}
                    defaultValue={1000}
                    suffix="req/min"
                  />
                </FormField>
              </FormGroup>

              <FormField label="Allowed Origins (CORS)">
                <Input placeholder="*.example.com, localhost:*" />
              </FormField>

              <FormGroup columns={2}>
                <FormField>
                  <Switch label="Enable WebSocket" defaultChecked />
                </FormField>
                <FormField>
                  <Switch label="Enable MQTT" defaultChecked />
                </FormField>
              </FormGroup>
            </FormSection>

            <div className="flex justify-end gap-2">
              <Button
                variant="primary"
                onClick={() =>
                  showToast({
                    type: "warning",
                    title: "Restart Required",
                    message: "Changes will take effect after system restart.",
                  })
                }
              >
                Save Network Settings
              </Button>
            </div>
          </Form>
        </TabPanel>

        {/* Maintenance Settings */}
        <TabPanel value="maintenance">
          <div className="space-y-4">
            <Panel variant="bordered" title="System Status">
              <PanelRow label="Uptime" value={systemInfo.uptime} />
              <PanelRow label="Last Update" value={systemInfo.lastUpdate} />
              <PanelRow label="Environment" value={systemInfo.environment} />
            </Panel>

            <Accordion>
              <AccordionItem
                value="backup"
                title="Backup & Restore"
                subtitle="Manage system backups"
              >
                <div className="space-y-4">
                  <FormSection title="Automatic Backups">
                    <FormGroup columns={2}>
                      <FormField label="Enable Auto-backup">
                        <Switch label="Enable" defaultChecked />
                      </FormField>
                      <FormField label="Backup Interval">
                        <Select defaultValue="daily">
                          <Option value="hourly">Hourly</Option>
                          <Option value="daily">Daily</Option>
                          <Option value="weekly">Weekly</Option>
                        </Select>
                      </FormField>
                      <FormField label="Retention Period">
                        <NumericInput
                          min={1}
                          max={90}
                          defaultValue={30}
                          suffix="days"
                        />
                      </FormField>
                      <FormField label="Compression">
                        <Select defaultValue="gzip">
                          <Option value="none">None</Option>
                          <Option value="gzip">GZIP</Option>
                          <Option value="zip">ZIP</Option>
                        </Select>
                      </FormField>
                    </FormGroup>
                  </FormSection>

                  <div className="flex gap-2">
                    <Button
                      variant="primary"
                      onClick={() => setShowBackupDialog(true)}
                    >
                      Create Backup
                    </Button>
                    <Button variant="default">Restore</Button>
                  </div>
                </div>
              </AccordionItem>

              <AccordionItem
                value="updates"
                title="System Updates"
                subtitle="Manage system updates and patches"
              >
                <div className="space-y-4">
                  <FormSection title="Update Settings">
                    <FormGroup columns={2}>
                      <FormField label="Auto Updates">
                        <Switch label="Enable" defaultChecked />
                      </FormField>
                      <FormField label="Update Channel">
                        <Select defaultValue="stable">
                          <Option value="stable">Stable</Option>
                          <Option value="beta">Beta</Option>
                          <Option value="dev">Development</Option>
                        </Select>
                      </FormField>
                    </FormGroup>
                  </FormSection>

                  <Button variant="primary">Check for Updates</Button>
                </div>
              </AccordionItem>

              <AccordionItem
                value="reset"
                title="Factory Reset"
                subtitle="Reset system to default settings"
              >
                <div className="space-y-4">
                  <p className="text-sm text-red-500">
                    Warning: This action cannot be undone and will erase all
                    data.
                  </p>
                  <Button
                    variant="danger"
                    onClick={() => setShowResetDialog(true)}
                  >
                    Factory Reset
                  </Button>
                </div>
              </AccordionItem>
            </Accordion>
          </div>
        </TabPanel>

        {/* About Panel */}
        <TabPanel value="about">
          <div className="space-y-4">
            <Panel variant="bordered" title="System Information">
              <PanelRow label="Version" value={systemInfo.version} />
              <PanelRow label="Environment" value={systemInfo.environment} />
              <PanelRow label="Node.js" value={systemInfo.nodeVersion} />
              <PanelRow label="Database" value={systemInfo.database} />
              <PanelRow label="Operating System" value={systemInfo.os} />
            </Panel>

            <Terminal
              title="SYSTEM_INFO"
              lines={[
                "> System Version: " + systemInfo.version,
                "> Node Version: " + systemInfo.nodeVersion,
                "> Database: " + systemInfo.database,
                "> OS: " + systemInfo.os,
                "> Uptime: " + systemInfo.uptime,
              ]}
            />
          </div>
        </TabPanel>
      </Tabs>

      {/* Backup Dialog */}
      <Dialog
        open={showBackupDialog}
        onClose={() => setShowBackupDialog(false)}
        title="Create System Backup"
      >
        <Form>
          <FormField label="Backup Name">
            <Input
              placeholder="Enter backup name"
              defaultValue={`backup_${new Date().toISOString().split("T")[0]}`}
            />
          </FormField>
          <FormField label="Include">
            <FormGroup>
              <Switch label="Configuration" defaultChecked />
              <Switch label="User Data" defaultChecked />
              <Switch label="Logs" defaultChecked />
            </FormGroup>
          </FormField>
        </Form>
        <div className="mt-4 flex justify-end gap-2">
          <Button variant="default" onClick={() => setShowBackupDialog(false)}>
            Cancel
          </Button>
          <Button
            variant="primary"
            onClick={() => {
              showToast({
                type: "success",
                title: "Backup Started",
                message: "System backup is in progress...",
              });
              setShowBackupDialog(false);
            }}
          >
            Start Backup
          </Button>
        </div>
      </Dialog>

      {/* Reset Dialog */}
      <Dialog
        open={showResetDialog}
        onClose={() => setShowResetDialog(false)}
        title="Factory Reset"
        alert
      >
        <div className="space-y-4">
          <p className="text-sm">
            Are you sure you want to reset the system to factory defaults? This
            action cannot be undone and will erase all data.
          </p>
          <FormField label="Confirmation">
            <Input
              placeholder="Type 'RESET' to confirm"
              onChange={(e) =>
                e.target.value === "RESET" &&
                showToast({
                  type: "error",
                  title: "Factory Reset",
                  message: "System will be reset in 5 seconds...",
                })
              }
            />
          </FormField>
        </div>
        <div className="mt-4 flex justify-end gap-2">
          <Button variant="default" onClick={() => setShowResetDialog(false)}>
            Cancel
          </Button>
          <Button variant="danger">Reset System</Button>
        </div>
      </Dialog>
    </div>
  );
}

================
File: examples/next-app/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #e9e9e9;
  --foreground: #000;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

================
File: examples/next-app/app/layout.tsx
================
import { Navigation } from "@/components/navigation";
import { Header } from "industrydb";
import "./globals.css";
import Providers from "./providers";

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body>
        <Providers>
          <div className="flex h-screen flex-col bg-background">
            <Header
              title="Industrial Control System"
              subtitle="Production Environment"
            />
            <div className="flex flex-1 overflow-hidden">
              <Navigation />
              <main className="flex-1 overflow-auto p-4">{children}</main>
            </div>
          </div>
        </Providers>
      </body>
    </html>
  );
}

================
File: examples/next-app/app/page.tsx
================
"use client";
import { SystemStats } from "@/components/system-stats";
import {
  CommandBar,
  DataGrid,
  Meter,
  Panel,
  PanelRow,
  SplitView,
  SplitViewPanel,
  TimeSeries,
  useToast,
} from "industrydb";

// Mock data generator
function generateTimeData(points: number) {
  return Array.from({ length: points }, (_, i) => ({
    timestamp: new Date(Date.now() - (points - i) * 60000),
    value: Math.random() * 100,
  }));
}

export default function DashboardPage() {
  const { showToast } = useToast();
  return (
    <div className="space-y-4">
      <CommandBar
        actions={[
          {
            key: "F5",
            label: "Refresh",
            onClick: () => {
              showToast({
                type: "info",
                title: "Refresh",
                message: "Data refreshed successfully",
              });
            },
          },
          {
            key: "F6",
            label: "Export",
            onClick: () => {
              showToast({
                type: "success",
                title: "Export",
                message: "Data exported successfully",
              });
            },
          },
        ]}
        status={[
          { label: "Status", value: "Online" },
          { label: "Active Users", value: "23" },
        ]}
      />

      <SystemStats />

      <SplitView
        first={
          <SplitViewPanel title="System Overview">
            <div className="space-y-4">
              <Panel title="Critical Metrics" variant="bordered">
                <PanelRow
                  label="CPU Usage"
                  value={<Meter value={45} max={100} />}
                />
                <PanelRow
                  label="Memory"
                  value={<Meter value={72} max={100} />}
                />
                <PanelRow
                  label="Disk Space"
                  value={<Meter value={28} max={100} />}
                />
              </Panel>

              <Panel title="Active Alarms">
                <DataGrid
                  columns={[
                    { key: "id", header: "ID" },
                    { key: "severity", header: "Severity" },
                    { key: "message", header: "Message" },
                  ]}
                  data={[
                    { id: "ALM001", severity: "High", message: "CPU Overload" },
                    {
                      id: "ALM002",
                      severity: "Low",
                      message: "Disk Space Warning",
                    },
                  ]}
                />
              </Panel>
            </div>
          </SplitViewPanel>
        }
        second={
          <SplitViewPanel title="Performance Metrics">
            <div className="space-y-4">
              <TimeSeries
                data={[generateTimeData(20), generateTimeData(20)]}
                labels={["CPU", "Memory"]}
                height={200}
              />
              <TimeSeries
                data={generateTimeData(20)}
                labels={["Network"]}
                height={200}
              />
            </div>
          </SplitViewPanel>
        }
      />
    </div>
  );
}

================
File: examples/next-app/app/providers.tsx
================
"use client";
import { ToastProvider } from "industrydb";

export default function Providers({
  children,
}: Readonly<{ children: React.ReactNode }>) {
  return <ToastProvider>{children}</ToastProvider>;
}

================
File: examples/next-app/components/navigation.tsx
================
"use client";
import { cn } from "industrydb";
import Link from "next/link";
import { usePathname } from "next/navigation";

const routes = [
  { path: "/", label: "Dashboard", icon: "⚡" },
  { path: "/processes", label: "Processes", icon: "🔧" },
  { path: "/metrics", label: "Metrics", icon: "📊" },
  { path: "/alarms", label: "Alarms", icon: "⚠️" },
  { path: "/devices", label: "Devices", icon: "🏭" },
  { path: "/logs", label: "System Logs", icon: "📋" },
  { path: "/settings", label: "Settings", icon: "⚙️" },
];

export function Navigation() {
  const pathname = usePathname();

  return (
    <nav className="w-56 border-r border-zinc-700 bg-zinc-200">
      <div className="space-y-0.5 p-3">
        {routes.map((route) => (
          <Link
            key={route.path}
            href={route.path}
            className={cn(
              "flex items-center gap-3 rounded-sm px-4 py-3 text-sm transition-all duration-150",
              pathname === route.path
                ? "bg-yellow-100 font-medium text-zinc-900 shadow-sharp-sm"
                : "text-zinc-900 hover:bg-zinc-100 hover:text-zinc-900 hover:shadow-sharp-sm",
            )}
          >
            <span className="text-lg">{route.icon}</span>
            {route.label}
          </Link>
        ))}
      </div>
    </nav>
  );
}

================
File: examples/next-app/components/system-stats.tsx
================
"use client";
import { Panel, PanelRow, StatusIndicator } from "industrydb";

export function SystemStats() {
  return (
    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
      <Panel variant="bordered">
        <PanelRow
          label="System Status"
          value={
            <div className="flex items-center justify-end gap-2">
              <StatusIndicator status="success" />
              <span>Operational</span>
            </div>
          }
        />
      </Panel>

      <Panel variant="bordered">
        <PanelRow
          label="Active Processes"
          value={
            <div className="flex items-center justify-end gap-2">
              <span className="text-lg font-bold">127</span>
              <span className="text-xs text-green-500">+12%</span>
            </div>
          }
        />
      </Panel>

      <Panel variant="bordered">
        <PanelRow
          label="Memory Usage"
          value={
            <div className="flex items-center justify-end gap-2">
              <span className="text-lg font-bold">72%</span>
              <span className="text-xs text-yellow-500">Warning</span>
            </div>
          }
        />
      </Panel>

      <Panel variant="bordered">
        <PanelRow
          label="Network Load"
          value={
            <div className="flex items-center justify-end gap-2">
              <span className="text-lg font-bold">45 Mb/s</span>
              <span className="text-xs text-gray-500">Normal</span>
            </div>
          }
        />
      </Panel>
    </div>
  );
}

================
File: examples/next-app/public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: examples/next-app/public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: examples/next-app/public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: examples/next-app/public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: examples/next-app/public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: examples/next-app/.gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: examples/next-app/eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: examples/next-app/next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: examples/next-app/package.json
================
{
  "name": "next-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "industrydb": "file:../..",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "next": "15.1.4"
  },
  "devDependencies": {
    "typescript": "^5",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "eslint": "^9",
    "eslint-config-next": "15.1.4",
    "@eslint/eslintrc": "^3"
  }
}

================
File: examples/next-app/postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: examples/next-app/README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: examples/next-app/tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    "../../node_modules/industrydb/dist/**/*.{js,mjs}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [require("industrydb/plugin")],
} satisfies Config;

================
File: examples/next-app/tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",

    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "typeRoots": ["./types", "./node_modules/@types"],
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "types/**/*.d.ts"
  ],
  "exclude": ["node_modules"]
}

================
File: scripts/dev.js
================
const concurrently = require("concurrently");

try {
  concurrently(
    [
      {
        command: "npm run dev:lib",
        name: "lib",
        prefixColor: "blue",
      },
      {
        command: "npm run demo:next",
        name: "next",
        prefixColor: "green",
      },
    ],
    {
      prefix: "name",
      killOthers: ["failure"],
      restartTries: 3,
    }
  ).result.then(
    () => process.exit(0),
    (error) => {
      console.error("Error running development servers:", error);
      process.exit(1);
    }
  );
} catch (error) {
  console.error("Failed to start development servers:", error);
  process.exit(1);
}

================
File: scripts/generate-docs.ts
================
import fs from "fs";
import path from "path";
import ts from "typescript";

interface ComponentDoc {
  name: string;
  description: string;
  props: PropDoc[];
  examples: string[];
}

interface PropDoc {
  name: string;
  type: string;
  required: boolean;
  description: string;
  defaultValue?: string;
}

function generateComponentDocs(sourceFile: string): ComponentDoc {
  const program = ts.createProgram([sourceFile], {});
  const checker = program.getTypeChecker();
  const source = program.getSourceFile(sourceFile);

  if (!source) {
    throw new Error(`Could not find source file: ${sourceFile}`);
  }

  let componentDoc: Partial<ComponentDoc> = {
    name: path.basename(sourceFile, ".tsx"),
    props: [],
    examples: [],
  };

  // Get component description from leading comments
  const fileComment = ts.getLeadingCommentRanges(source.getFullText(), 0)?.[0];
  if (fileComment) {
    componentDoc.description = source
      .getFullText()
      .slice(fileComment.pos, fileComment.end)
      .replace(/\/\*|\*\/|\*/g, "")
      .trim();
  }

  // Find interface declarations for props
  ts.forEachChild(source, (node) => {
    if (ts.isInterfaceDeclaration(node) && node.name.text.endsWith("Props")) {
      componentDoc.props = node.members
        .map((member) => {
          if (ts.isPropertySignature(member)) {
            const symbol = checker.getSymbolAtLocation(member.name);
            const type = checker.getTypeAtLocation(member);

            const propDoc: PropDoc = {
              name: member.name.getText(),
              type: checker.typeToString(type),
              required: !member.questionToken,
              description:
                symbol
                  ?.getDocumentationComment(checker)
                  .map((comment) => comment.text)
                  .join("\n") || "",
            };

            // Get default value from JSDoc @default tag if present
            const jsDocTags = symbol?.getJsDocTags();
            const defaultTag = jsDocTags?.find((tag) => tag.name === "default");
            if (defaultTag?.text) {
              propDoc.defaultValue = defaultTag.text
                .map((t) => t.text)
                .join("");
            }

            return propDoc;
          }
          return null;
        })
        .filter(Boolean) as PropDoc[];
    }
  });

  // Find story examples
  const storyFile = sourceFile.replace(
    /src\/components\/(.*)\.tsx/,
    "src/stories/$1.stories.tsx"
  );
  if (fs.existsSync(storyFile)) {
    const storySource = fs.readFileSync(storyFile, "utf-8");
    const storyMatches = storySource.match(/export const \w+ = {[\s\S]*?}/g);
    if (storyMatches) {
      componentDoc.examples = storyMatches.map((example) => example.trim());
    }
  }

  return componentDoc as ComponentDoc;
}

function generateMarkdown(doc: ComponentDoc): string {
  return `
# ${doc.name}

${doc.description}

## Props

${doc.props
  .map(
    (prop) => `
### ${prop.name}${prop.required ? " (Required)" : ""}

- **Type:** \`${prop.type}\`${
      prop.defaultValue ? `\n- **Default:** ${prop.defaultValue}` : ""
    }

${prop.description}
`
  )
  .join("\n")}

## Examples

${doc.examples
  .map(
    (example, index) => `
### Example ${index + 1}

\`\`\`tsx
${example}
\`\`\`
`
  )
  .join("\n")}
`;
}

// Main function to generate docs for all components
async function generateAllDocs() {
  const componentsDir = path.join(process.cwd(), "src/components");
  const docsDir = path.join(process.cwd(), "docs");

  if (!fs.existsSync(docsDir)) {
    fs.mkdirSync(docsDir);
  }

  const components = fs
    .readdirSync(componentsDir, { recursive: true })
    .filter((file) => file.toString().endsWith(".tsx"));

  for (const component of components) {
    const componentPath = path.join(componentsDir, component.toString());
    const doc = generateComponentDocs(componentPath);
    const markdown = generateMarkdown(doc);

    fs.writeFileSync(path.join(docsDir, `${doc.name}.md`), markdown, "utf-8");
  }

  // Generate index
  const index = components
    .map((component) => {
      const name = path.basename(component.toString(), ".tsx");
      return `- [${name}](./${name}.md)`;
    })
    .join("\n");

  fs.writeFileSync(path.join(docsDir, "README.md"), index, "utf-8");
}

generateAllDocs().catch(console.error);

================
File: scripts/tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2018",
    "module": "CommonJS",
    "lib": ["ES2018"],
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "moduleResolution": "node"
  },
  "include": ["./**/*"],
  "exclude": ["node_modules"]
}

================
File: src/components/primitive/accordion.tsx
================
"use client";
import React, { createContext, useContext, useState } from "react";
import { cn } from "../../lib/cn";

type AccordionContextValue = {
  value?: string[];
  onValueChange?: (value: string[]) => void;
  variant?: "default" | "terminal";
  multiple?: boolean;
};

const AccordionContext = createContext<AccordionContextValue>({});

export interface AccordionProps extends React.HTMLAttributes<HTMLDivElement> {
  value?: string[];
  onValueChange?: (value: string[]) => void;
  variant?: "default" | "terminal";
  multiple?: boolean;
  className?: string;
}

export interface AccordionItemProps
  extends Omit<React.HTMLAttributes<HTMLDivElement>, "title"> {
  value: string;
  title: React.ReactNode;
  subtitle?: React.ReactNode;
  disabled?: boolean;
  className?: string;
}

export const Accordion = React.forwardRef<HTMLDivElement, AccordionProps>(
  (
    {
      value,
      onValueChange,
      variant = "default",
      multiple = false,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [internalValue, setInternalValue] = useState<string[]>([]);
    const currentValue = value ?? internalValue;

    const handleValueChange = (newValue: string[]) => {
      setInternalValue(newValue);
      onValueChange?.(newValue);
    };

    return (
      <AccordionContext.Provider
        value={{
          value: currentValue,
          onValueChange: handleValueChange,
          variant,
          multiple,
        }}
      >
        <div
          ref={ref}
          className={cn(
            "divide-y font-mono text-sm",
            variant === "default" && [
              "divide-gray-200",
              "border border-gray-200",
            ],
            variant === "terminal" && [
              "divide-green-500",
              "border border-green-500",
            ],
            className
          )}
          {...props}
        >
          {children}
        </div>
      </AccordionContext.Provider>
    );
  }
);

export const AccordionItem = React.forwardRef<
  HTMLDivElement,
  AccordionItemProps
>(
  (
    { value, title, subtitle, disabled, className, children, ...props },
    ref
  ) => {
    const {
      value: selectedValues,
      onValueChange,
      variant,
      multiple,
    } = useContext(AccordionContext);

    const isExpanded = selectedValues?.includes(value);

    const handleClick = () => {
      if (disabled) return;

      const newValue = multiple
        ? isExpanded
          ? (selectedValues ?? []).filter((v) => v !== value)
          : [...(selectedValues ?? []), value]
        : isExpanded
        ? []
        : [value];

      onValueChange?.(newValue);
    };

    return (
      <div
        ref={ref}
        className={cn(
          variant === "default" && "bg-white",
          variant === "terminal" && "bg-black",
          disabled && "opacity-50",
          className
        )}
        {...props}
      >
        <button
          type="button"
          onClick={handleClick}
          disabled={disabled}
          className={cn(
            "flex w-full items-center justify-between px-4 py-2",
            variant === "default" && [
              "hover:bg-gray-50",
              "active:bg-gray-100",
              disabled && "hover:bg-transparent",
            ],
            variant === "terminal" && [
              "text-green-400",
              "hover:bg-green-900 hover:bg-opacity-20",
              "active:bg-green-900 active:bg-opacity-40",
              disabled && "hover:bg-transparent",
            ]
          )}
        >
          <div>
            <div className="font-bold">{title}</div>
            {subtitle && (
              <div
                className={cn(
                  "text-xs",
                  variant === "default" && "text-gray-500",
                  variant === "terminal" && "text-green-600"
                )}
              >
                {subtitle}
              </div>
            )}
          </div>
          <div
            className={cn(
              "ml-2 transition-transform",
              isExpanded && "rotate-180"
            )}
          >
            ▼
          </div>
        </button>
        {isExpanded && (
          <div
            className={cn(
              "overflow-hidden px-4 py-3",
              variant === "default" && "bg-gray-50",
              variant === "terminal" && [
                "bg-green-900 bg-opacity-10",
                "text-green-400",
              ]
            )}
          >
            {children}
          </div>
        )}
      </div>
    );
  }
);

Accordion.displayName = "Accordion";
AccordionItem.displayName = "AccordionItem";

================
File: src/components/primitive/badge.tsx
================
"use client";
import React from "react";
import { cn } from "../../lib/cn";

export interface BadgeProps extends React.HTMLAttributes<HTMLSpanElement> {
  variant?: "default" | "outline" | "solid";
  color?: "gray" | "yellow" | "green" | "red" | "blue";
  className?: string;
}

const Badge = React.forwardRef<HTMLSpanElement, BadgeProps>(
  ({ variant = "default", color = "gray", className, ...props }, ref) => {
    return (
      <span
        ref={ref}
        className={cn(
          "inline-flex items-center px-2 font-mono text-xs font-bold",
          // Default variant
          variant === "default" &&
            color === "gray" &&
            "bg-gray-100 text-gray-800",
          variant === "default" &&
            color === "yellow" &&
            "bg-yellow-100 text-yellow-800",
          variant === "default" &&
            color === "green" &&
            "bg-green-100 text-green-800",
          variant === "default" && color === "red" && "bg-red-100 text-red-800",
          variant === "default" &&
            color === "blue" &&
            "bg-blue-100 text-blue-800",
          // Outline variant
          variant === "outline" && "border",
          variant === "outline" &&
            color === "gray" &&
            "border-gray-300 text-gray-800",
          variant === "outline" &&
            color === "yellow" &&
            "border-yellow-300 text-yellow-800",
          variant === "outline" &&
            color === "green" &&
            "border-green-300 text-green-800",
          variant === "outline" &&
            color === "red" &&
            "border-red-300 text-red-800",
          variant === "outline" &&
            color === "blue" &&
            "border-blue-300 text-blue-800",
          // Solid variant
          variant === "solid" && color === "gray" && "bg-gray-500 text-white",
          variant === "solid" &&
            color === "yellow" &&
            "bg-yellow-500 text-white",
          variant === "solid" && color === "green" && "bg-green-500 text-white",
          variant === "solid" && color === "red" && "bg-red-500 text-white",
          variant === "solid" && color === "blue" && "bg-blue-500 text-white",
          className
        )}
        {...props}
      />
    );
  }
);

Badge.displayName = "Badge";

export { Badge };

================
File: src/components/primitive/breadcrumbs.tsx
================
"use client";
import React from "react";
import { cn } from "../../lib/cn";

export interface BreadcrumbItem {
  label: string;
  href?: string;
}

export interface BreadcrumbsProps {
  items: BreadcrumbItem[];
  variant?: "default" | "terminal";
  separator?: React.ReactNode;
  className?: string;
}

export function Breadcrumbs({
  items,
  variant = "default",
  separator = "/",
  className,
}: BreadcrumbsProps) {
  return (
    <nav
      className={cn(
        "flex items-center space-x-2 font-mono text-sm",
        variant === "default" && "text-gray-600",
        variant === "terminal" && "text-green-400",
        className
      )}
    >
      {items.map((item, index) => {
        const isLast = index === items.length - 1;

        return (
          <React.Fragment key={index}>
            {item.href ? (
              <a
                href={item.href}
                className={cn(
                  "hover:underline",
                  variant === "default" && "text-gray-600 hover:text-gray-800",
                  variant === "terminal" &&
                    "text-green-400 hover:text-green-300",
                  isLast && "font-bold pointer-events-none"
                )}
              >
                {item.label}
              </a>
            ) : (
              <span className={cn(isLast && "font-bold")}>{item.label}</span>
            )}

            {!isLast && (
              <span
                className={cn(
                  "select-none",
                  variant === "default" && "text-gray-400",
                  variant === "terminal" && "text-green-600"
                )}
              >
                {separator}
              </span>
            )}
          </React.Fragment>
        );
      })}
    </nav>
  );
}

Breadcrumbs.displayName = "Breadcrumbs";

================
File: src/components/primitive/button.tsx
================
"use client";
import React from "react";
import { cn } from "../../lib/cn";

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: "default" | "primary" | "danger" | "terminal";
  size?: "sm" | "md" | "lg";
  loading?: boolean;
  active?: boolean;
  className?: string;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  (
    {
      variant = "default",
      size = "md",
      loading = false,
      active = false,
      className,
      children,
      disabled,
      ...props
    },
    ref,
  ) => {
    return (
      <button
        ref={ref}
        disabled={disabled || loading}
        className={cn(
          // Base styles
          "inline-flex items-center justify-center font-mono transition-colors shadow-sharp-sm hover:shadow-none",
          "disabled:cursor-not-allowed disabled:opacity-50",
          // Size variations
          size === "sm" && "px-4 py-1 text-xs",
          size === "md" && "px-6 py-1 text-sm",
          size === "lg" && "px-8 py-2 text-base",
          // Variant styles
          variant === "default" && [
            "border border-gray-200 bg-white hover:bg-gray-50",
            "active:bg-gray-100",
            active && "bg-gray-100",
          ],
          variant === "primary" && [
            "border border-yellow-400 bg-yellow-400 text-black",
            "hover:bg-yellow-500 hover:border-yellow-500",
            "active:bg-yellow-600 active:border-yellow-600",
            active && "bg-yellow-500 border-yellow-500",
          ],
          variant === "danger" && [
            "border border-red-500 bg-red-500 text-white",
            "hover:bg-red-600 hover:border-red-600",
            "active:bg-red-700 active:border-red-700",
            active && "bg-red-600 border-red-600",
          ],
          variant === "terminal" && [
            "border border-green-500 bg-black text-green-500",
            "hover:bg-green-900 hover:bg-opacity-20",
            "active:bg-green-900 active:bg-opacity-40",
            active && "bg-green-900 bg-opacity-20",
          ],
          className,
        )}
        {...props}
      >
        {loading ? (
          <>
            <span className="opacity-0">{children}</span>
            <span className="absolute inset-0 flex items-center justify-center">
              {variant === "terminal" ? (
                <span className="animate-pulse">PROCESSING...</span>
              ) : (
                <span className="block h-4 w-4 animate-spin border-2 border-current border-t-transparent" />
              )}
            </span>
          </>
        ) : (
          children
        )}
      </button>
    );
  },
);

Button.displayName = "Button";

export { Button };

================
File: src/components/primitive/command-bar.tsx
================
"use client";
import React from "react";
import { cn } from "../../lib/cn";

export interface CommandAction {
  key: string;
  label: string;
  disabled?: boolean;
  onClick?: () => void;
}

export interface StatusItem {
  label: string;
  value: string | React.ReactNode;
  alert?: boolean;
}

export interface CommandBarProps extends React.HTMLAttributes<HTMLDivElement> {
  actions?: CommandAction[];
  status?: StatusItem[];
  variant?: "default" | "terminal";
  position?: "top" | "bottom";
  className?: string;
}

const CommandBar = React.forwardRef<HTMLDivElement, CommandBarProps>(
  (
    {
      actions = [],
      status = [],
      variant = "default",
      position = "bottom",
      className,
      ...props
    },
    ref,
  ) => {
    return (
      <div
        ref={ref}
        className={cn(
          "font-mono text-sm",
          variant === "default" && "border-gray-200 bg-gray-50",
          variant === "terminal" && "border-green-500 bg-black",
          position === "top" && "border-b",
          position === "bottom" && "border-t",
          className,
        )}
        {...props}
      >
        <div className="flex h-14 items-center justify-between px-4 gap-2">
          {/* Function Key Actions */}
          <div className="flex items-center gap-6">
            {actions.map((action) => (
              <button
                key={action.key}
                onClick={action.onClick}
                disabled={action.disabled}
                className={cn(
                  "flex items-center gap-2 transition-colors",
                  variant === "default" && [
                    "text-gray-600 hover:text-gray-900",
                    action.disabled && "cursor-not-allowed text-gray-400",
                  ],
                  variant === "terminal" && [
                    "text-green-400 hover:text-green-300",
                    action.disabled && "cursor-not-allowed text-green-800",
                  ],
                )}
              >
                <span
                  className={cn(
                    "flex h-7 min-w-[28px] items-center justify-center border px-1  hover:shadow-sharp-sm",
                    variant === "default" && [
                      "border-gray-300 bg-white",
                      action.disabled && "bg-gray-50",
                    ],
                    variant === "terminal" && [
                      "border-green-500 bg-black",
                      action.disabled && "border-green-800",
                    ],
                  )}
                >
                  {action.key}
                </span>
                <span className="min-w-[48px]">{action.label}</span>
              </button>
            ))}
          </div>

          {/* Status Items */}
          <div className="flex items-center gap-6">
            {status.map((item, index) => (
              <div
                key={index}
                className={cn(
                  "flex items-center gap-3",
                  variant === "default" && [
                    "text-gray-600",
                    item.alert && "text-red-600",
                  ],
                  variant === "terminal" && [
                    "text-green-400",
                    item.alert && "text-red-500",
                  ],
                )}
              >
                <span className="text-xs uppercase">{item.label}:</span>
                <span
                  className={cn("font-bold", item.alert && "animate-pulse")}
                >
                  {item.value}
                </span>
              </div>
            ))}
          </div>
        </div>
      </div>
    );
  },
);

CommandBar.displayName = "CommandBar";

export { CommandBar };

================
File: src/components/primitive/datagrid.tsx
================
"use client";
import React, { useMemo, useState } from "react";
import { cn } from "../../lib/cn";

export interface Column<T> {
  key: string;
  header: string;
  width?: string;
  sortable?: boolean;
  render?: (value: any, row: T) => React.ReactNode;
}

export interface DataGridProps<T> {
  columns: Column<T>[];
  data: T[];
  variant?: "default" | "terminal";
  selectable?: boolean;
  selectMode?: "single" | "multiple";
  onRowSelect?: (selectedRows: T[]) => void;
  onSort?: (key: string, direction: "asc" | "desc") => void;
  className?: string;
}

export function DataGrid<T extends { id?: string | number }>({
  columns,
  data,
  variant = "default",
  selectable = false,
  selectMode = "multiple",
  onRowSelect,
  onSort,
  className,
}: DataGridProps<T>) {
  const [sortConfig, setSortConfig] = useState<{
    key: string;
    direction: "asc" | "desc";
  } | null>(null);
  const [selectedRows, setSelectedRows] = useState<Set<string | number>>(
    new Set(),
  );

  const sortedData = useMemo(() => {
    if (!sortConfig) return data;
    return [...data].sort((a: any, b: any) => {
      const aValue = a[sortConfig.key];
      const bValue = b[sortConfig.key];
      if (aValue < bValue) return sortConfig.direction === "asc" ? -1 : 1;
      if (aValue > bValue) return sortConfig.direction === "asc" ? 1 : -1;
      return 0;
    });
  }, [data, sortConfig]);

  const handleSort = (key: string) => {
    let direction: "asc" | "desc" = "asc";
    if (sortConfig?.key === key && sortConfig.direction === "asc") {
      direction = "desc";
    }
    setSortConfig({ key, direction });
    onSort?.(key, direction);
  };

  const handleRowSelect = (id: string | number) => {
    const newSelected = new Set(selectedRows);
    if (selectMode === "single") {
      // For single select, either select the new row or clear if it's already selected
      if (selectedRows.has(id)) {
        newSelected.clear();
      } else {
        newSelected.clear();
        newSelected.add(id);
      }
    } else {
      // For multiple select, toggle the selection
      if (selectedRows.has(id)) {
        newSelected.delete(id);
      } else {
        newSelected.add(id);
      }
    }
    setSelectedRows(newSelected);
    onRowSelect?.(sortedData.filter((row) => newSelected.has(row.id!)));
  };

  const handleSelectAll = () => {
    if (selectedRows.size === data.length) {
      setSelectedRows(new Set());
      onRowSelect?.([]);
    } else {
      const allIds = new Set(data.map((row) => row.id!));
      setSelectedRows(allIds);
      onRowSelect?.(data);
    }
  };

  return (
    <div
      className={cn(
        "w-full font-mono",
        variant === "default" && "border border-black",
        variant === "terminal" && "border border-green-500 bg-black",
        className,
      )}
    >
      <table className="w-full border-collapse">
        <thead>
          <tr
            className={cn(
              "border-b",
              variant === "default" && "border-gray-200 bg-gray-50",
              variant === "terminal" && "border-green-500 bg-black",
            )}
          >
            {selectable && selectMode === "multiple" && (
              <th
                className={cn(
                  "w-10 border-r px-3 py-2",
                  variant === "default" && "border-gray-200",
                  variant === "terminal" && "border-green-500 text-green-400",
                )}
              >
                <input
                  type="checkbox"
                  className="cursor-pointer"
                  checked={selectedRows.size === data.length}
                  onChange={handleSelectAll}
                />
              </th>
            )}
            {selectable && selectMode === "single" && (
              <th
                className={cn(
                  "w-10 border-r px-3 py-2",
                  variant === "default" && "border-gray-200",
                  variant === "terminal" && "border-green-500 text-green-400",
                )}
              />
            )}
            {columns.map((column, index) => (
              <th
                key={column.key}
                className={cn(
                  "px-3 py-2 text-left font-bold",
                  column.width && `w-[${column.width}]`,
                  index < columns.length - 1 && "border-r",
                  variant === "default" && "border-gray-200",
                  variant === "terminal" && "border-green-500 text-green-400",
                  column.sortable && "cursor-pointer hover:bg-gray-100",
                  variant === "terminal" &&
                    column.sortable &&
                    "hover:bg-green-900 hover:bg-opacity-20",
                )}
                onClick={() => column.sortable && handleSort(column.key)}
              >
                <div className="flex items-center gap-1">
                  {column.header}
                  {column.sortable && sortConfig?.key === column.key && (
                    <span>{sortConfig.direction === "asc" ? "↑" : "↓"}</span>
                  )}
                </div>
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {sortedData.map((row, rowIndex) => (
            <tr
              key={row.id || rowIndex}
              className={cn(
                "border-b",
                variant === "default" && [
                  "border-gray-200",
                  "hover:bg-gray-50",
                  selectedRows.has(row.id!) && "bg-yellow-50",
                ],
                variant === "terminal" && [
                  "border-green-500",
                  "hover:bg-green-900 hover:bg-opacity-10",
                  selectedRows.has(row.id!) && "bg-green-900 bg-opacity-20",
                ],
              )}
            >
              {selectable && (
                <td
                  className={cn(
                    "w-10 border-r px-3 py-2",
                    variant === "default" && "border-gray-200",
                    variant === "terminal" && "border-green-500",
                  )}
                >
                  <input
                    type={selectMode === "single" ? "radio" : "checkbox"}
                    name="row-select"
                    className="cursor-pointer"
                    checked={selectedRows.has(row.id!)}
                    onChange={() => handleRowSelect(row.id!)}
                  />
                </td>
              )}
              {columns.map((column, index) => (
                <td
                  key={column.key}
                  className={cn(
                    "px-3 py-2",
                    column.width && `w-[${column.width}]`,
                    index < columns.length - 1 && "border-r",
                    variant === "default" && "border-gray-200",
                    variant === "terminal" && "border-green-500 text-green-400",
                  )}
                >
                  {column.render
                    ? column.render((row as any)[column.key], row)
                    : (row as any)[column.key]}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
        <tfoot>
          <tr>
            <td
              colSpan={columns.length + (selectable ? 1 : 0)}
              className={cn(
                "px-3 py-2 text-xs",
                variant === "default" &&
                  "border-t border-gray-200 text-gray-500",
                variant === "terminal" &&
                  "border-t border-green-500 text-green-400",
              )}
            >
              <div className="flex justify-between">
                <span>{data.length} records</span>
                {selectable && <span>{selectedRows.size} selected</span>}
              </div>
            </td>
          </tr>
        </tfoot>
      </table>
    </div>
  );
}

DataGrid.displayName = "DataGrid";

================
File: src/components/primitive/dialog.tsx
================
"use client";

import React, { useEffect } from "react";
import { cn } from "../../lib/cn";

export interface DialogProps {
  open: boolean;
  onClose: () => void;
  title: string;
  variant?: "default" | "terminal";
  alert?: boolean;
  children?: React.ReactNode;
  actions?: React.ReactNode;
  cancelText?: string;
  className?: string;
}

export const Dialog = React.forwardRef<HTMLDivElement, DialogProps>(
  (
    {
      open,
      onClose,
      title,
      variant = "default",
      alert = false,
      children,
      actions,
      cancelText = "Cancel",
      className,
      ...props
    },
    ref,
  ) => {
    useEffect(() => {
      const handleKeyDown = (e: KeyboardEvent) => {
        if (e.key === "Escape") {
          onClose();
        }
      };

      if (open) {
        document.addEventListener("keydown", handleKeyDown);
      } else {
        document.removeEventListener("keydown", handleKeyDown);
      }

      return () => {
        document.removeEventListener("keydown", handleKeyDown);
      };
    }, [open, onClose]);

    if (!open) return null;

    const handleBackdropClick = (e: React.MouseEvent) => {
      if (e.target === e.currentTarget) {
        onClose();
      }
    };

    return (
      <div
        className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 p-4"
        onClick={handleBackdropClick}
      >
        <div
          ref={ref}
          className={cn(
            "w-full max-w-lg font-mono shadow-sharp",
            variant === "default" && [
              "border border-gray-200 bg-white",
              alert && "border-red-500",
            ],
            variant === "terminal" && [
              "border border-green-500 bg-black",
              alert && "border-red-500",
            ],
            className,
          )}
          {...props}
        >
          {/* Header */}
          <div
            className={cn(
              "flex items-center justify-between border-b px-4 py-3",
              variant === "default" && [
                "border-gray-200 bg-gray-50",
                alert && "border-red-500 bg-red-50",
              ],
              variant === "terminal" && [
                "border-green-500 bg-black",
                alert && "border-red-500",
              ],
            )}
          >
            <div
              className={cn(
                "text-sm font-bold uppercase",
                variant === "terminal" && "text-green-400",
                alert && variant === "terminal" && "text-red-500",
              )}
            >
              {title}
            </div>
            <div className="flex items-center gap-2 text-xs text-gray-500">
              <span>[ESC]</span>
              <button
                onClick={onClose}
                className={cn(
                  "flex h-6 w-6 items-center justify-center border",
                  variant === "default" && [
                    "border-gray-200 hover:bg-gray-100",
                    alert && "border-red-200 hover:bg-red-50",
                  ],
                  variant === "terminal" && [
                    "border-green-500 text-green-400 hover:bg-green-900 hover:bg-opacity-20",
                    alert &&
                      "border-red-500 text-red-500 hover:bg-red-900 hover:bg-opacity-20",
                  ],
                )}
              >
                ×
              </button>
            </div>
          </div>

          {/* Content */}
          <div
            className={cn("p-4", variant === "terminal" && "text-green-400")}
          >
            {children}
          </div>

          {/* Footer */}
          {(actions || cancelText) && (
            <div
              className={cn(
                "flex items-center justify-end gap-2 border-t px-4 py-3",
                variant === "default" && "border-gray-200 bg-gray-50",
                variant === "terminal" && "border-green-500",
              )}
            >
              {actions}
              <button
                onClick={onClose}
                className={cn(
                  "px-4 py-1 text-sm transition-colors",
                  variant === "default" &&
                    "border border-gray-200 bg-white hover:bg-gray-50",
                  variant === "terminal" &&
                    "border border-green-500 text-green-400 hover:bg-green-900 hover:bg-opacity-20",
                )}
              >
                {cancelText}
              </button>
            </div>
          )}
        </div>
      </div>
    );
  },
);

Dialog.displayName = "Dialog";

================
File: src/components/primitive/form.tsx
================
"use client";
import React from "react";
import { cn } from "../../lib/cn";

// Form Context
interface FormContextValue {
  variant?: "default" | "terminal";
  disabled?: boolean;
  readonly?: boolean;
}

const FormContext = React.createContext<FormContextValue>({});

// Form Root
interface FormProps extends React.FormHTMLAttributes<HTMLFormElement> {
  variant?: "default" | "terminal";
  disabled?: boolean;
  readonly?: boolean;
  className?: string;
}

const Form = React.forwardRef<HTMLFormElement, FormProps>(
  ({ variant = "default", disabled, readonly, className, ...props }, ref) => {
    return (
      <FormContext.Provider value={{ variant, disabled, readonly }}>
        <form ref={ref} className={cn("space-y-4", className)} {...props} />
      </FormContext.Provider>
    );
  },
);

// Form Section
interface FormSectionProps extends React.HTMLAttributes<HTMLDivElement> {
  title?: string;
  description?: string;
  className?: string;
}

const FormSection = React.forwardRef<HTMLDivElement, FormSectionProps>(
  ({ title, description, className, children, ...props }, ref) => {
    const { variant } = React.useContext(FormContext);

    return (
      <div ref={ref} className={cn("space-y-4", className)} {...props}>
        {(title || description) && (
          <div className="space-y-1">
            {title && (
              <h3
                className={cn(
                  "font-mono text-sm font-bold",
                  variant === "terminal" && "text-green-400",
                )}
              >
                {title}
              </h3>
            )}
            {description && (
              <p
                className={cn(
                  "text-sm text-gray-500",
                  variant === "terminal" && "text-green-600",
                )}
              >
                {description}
              </p>
            )}
          </div>
        )}
        <div className="space-y-4">{children}</div>
      </div>
    );
  },
);

// Form Field
interface FormFieldProps extends React.HTMLAttributes<HTMLDivElement> {
  label?: string;
  required?: boolean;
  error?: string;
  hint?: string;
  className?: string;
  children?: React.ReactElement; // Explicitly type children as ReactElement
}

const FormField = React.forwardRef<HTMLDivElement, FormFieldProps>(
  ({ label, required, error, hint, className, children, ...props }, ref) => {
    const { variant } = React.useContext(FormContext);
    const id = React.useId();

    return (
      <div ref={ref} className={cn("space-y-1.5", className)} {...props}>
        {label && (
          <label
            htmlFor={id}
            className={cn(
              "font-mono text-sm font-medium",
              variant === "terminal" && "text-green-400",
            )}
          >
            {label}
            {required && (
              <span
                className={cn(
                  "ml-1 text-red-500",
                  variant === "terminal" && "text-red-400",
                )}
              >
                *
              </span>
            )}
          </label>
        )}
        {React.isValidElement(children) &&
          React.cloneElement(children, {
            id,
            "aria-describedby": error
              ? `${id}-error`
              : hint
                ? `${id}-hint`
                : undefined,
          } as React.HTMLAttributes<HTMLElement>)}{" "}
        {/* Add type assertion */}
        {hint && !error && (
          <p
            id={`${id}-hint`}
            className={cn(
              "text-xs text-gray-500",
              variant === "terminal" && "text-green-600",
            )}
          >
            {hint}
          </p>
        )}
        {error && (
          <p
            id={`${id}-error`}
            className={cn(
              "text-xs text-red-500",
              variant === "terminal" && "text-red-400",
            )}
          >
            {error}
          </p>
        )}
      </div>
    );
  },
);

// Form Group
interface FormGroupProps extends React.HTMLAttributes<HTMLDivElement> {
  columns?: number;
  className?: string;
}

const FormGroup = React.forwardRef<HTMLDivElement, FormGroupProps>(
  ({ columns = 1, className, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(
          "grid gap-4",
          columns === 1 && "grid-cols-1",
          columns === 2 && "grid-cols-2",
          columns === 3 && "grid-cols-3",
          columns === 4 && "grid-cols-4",
          className,
        )}
        {...props}
      />
    );
  },
);

Form.displayName = "Form";
FormSection.displayName = "FormSection";
FormField.displayName = "FormField";
FormGroup.displayName = "FormGroup";

export { Form, FormField, FormGroup, FormSection };

================
File: src/components/primitive/header.tsx
================
import React from "react";
import { cn } from "../../lib/cn";

interface HeaderProps {
  title: string;
  subtitle?: string;
  action?: React.ReactNode;
  className?: string;
}

const Header = React.forwardRef<HTMLDivElement, HeaderProps>(
  ({ title, subtitle, action, className }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-between bg-yellow-400 px-2 py-1 font-mono text-sm gap-2",
          className,
        )}
      >
        <div className="flex items-center gap-2">
          <span className="font-bold">{title}</span>
          {subtitle && <span className="text-gray-700">/ {subtitle}</span>}
        </div>
        {action}
      </div>
    );
  },
);

Header.displayName = "Header";

export { Header };
export type { HeaderProps };

================
File: src/components/primitive/input.tsx
================
"use client";
import React from "react";
import { cn } from "../../lib/cn";

export interface InputProps {
  variant?: "default" | "terminal" | "id";
  error?: boolean;
  prefix?: React.ReactNode;
  suffix?: React.ReactNode;
  className?: string;
  wrapperClassName?: string;
}

// Use intersection type to combine with HTML input attributes
const Input = React.forwardRef<
  HTMLInputElement,
  InputProps &
    Omit<React.InputHTMLAttributes<HTMLInputElement>, keyof InputProps>
>(
  (
    {
      variant = "default",
      error,
      prefix,
      suffix,
      className,
      wrapperClassName,
      ...props
    },
    ref,
  ) => {
    // If we have prefix/suffix, wrap the input
    const input = (
      <input
        ref={ref}
        className={cn(
          "w-full bg-white px-2 py-1 font-mono text-sm outline-none transition-colors",
          // Base styles by variant
          variant === "default" &&
            "border border-gray-600 focus:border-yellow-400",
          variant === "terminal" &&
            "border-0 bg-gray-900 text-green-400 focus:bg-black",
          variant === "id" &&
            "border border-gray-600 bg-gray-50 uppercase focus:border-yellow-400",
          // Error state
          error && "border-red-500 focus:border-red-500",
          // Disabled state
          props.disabled && "cursor-not-allowed bg-gray-50 text-gray-500",
          // Remove border radius for prefix/suffix
          prefix && "rounded-l-none",
          suffix && "rounded-r-none",
          className,
        )}
        {...props}
      />
    );

    // If no prefix/suffix, return just the input
    if (!prefix && !suffix) return input;

    // Return input with prefix/suffix wrapper
    return (
      <div className={cn("flex font-mono text-sm", wrapperClassName)}>
        {prefix && (
          <div className="flex items-center border border-r-0 border-gray-600 bg-gray-50 px-2">
            {prefix}
          </div>
        )}
        {input}
        {suffix && (
          <div className="flex items-center border border-l-0 border-gray-600 bg-gray-50 px-2">
            {suffix}
          </div>
        )}
      </div>
    );
  },
);

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {
  variant?: "default" | "terminal";
  error?: boolean;
  className?: string;
}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ variant = "default", error, className, ...props }, ref) => {
    return (
      <textarea
        ref={ref}
        className={cn(
          "w-full border border-gray-200 bg-white px-2 py-1 font-mono text-sm outline-none transition-colors",
          variant === "default" && "focus:border-yellow-400",
          variant === "terminal" &&
            "border-0 bg-gray-900 text-green-400 focus:bg-black",
          error && "border-red-500 focus:border-red-500",
          props.disabled && "cursor-not-allowed bg-gray-50 text-gray-500",
          className,
        )}
        {...props}
      />
    );
  },
);

export interface SearchInputProps extends Omit<InputProps, "type" | "variant"> {
  onSearch?: (value: string) => void;
  name?: string;
  placeholder?: string;
}

const SearchInput = React.forwardRef<HTMLInputElement, SearchInputProps>(
  ({ onSearch, className, ...props }, ref) => {
    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
      if (e.key === "Enter" && onSearch) {
        onSearch((e.target as HTMLInputElement).value);
      }
    };

    return (
      <Input
        ref={ref}
        type="search"
        prefix="⌕"
        className={cn("pl-2", className)}
        onKeyDown={handleKeyDown}
        {...props}
      />
    );
  },
);

export interface NumericInputProps extends InputProps {
  name?: string;
  min?: number;
  max?: number;
  step?: number;
  defaultValue?: number;
  allowNegative?: boolean;
  onChange?: React.ChangeEventHandler<HTMLInputElement>;
  onKeyDown?: React.KeyboardEventHandler<HTMLInputElement>;
}

const NumericInput = React.forwardRef<HTMLInputElement, NumericInputProps>(
  (
    {
      min,
      max,
      step = 1,
      defaultValue,
      allowNegative = false,
      onChange,
      onKeyDown,
      ...props
    },
    ref,
  ) => {
    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
      // Allow: backspace, delete, tab, escape, enter
      if (
        [8, 46, 9, 27, 13].indexOf(e.keyCode) !== -1 ||
        // Allow: Ctrl+A
        (e.keyCode === 65 && e.ctrlKey === true) ||
        // Allow: home, end, left, right
        (e.keyCode >= 35 && e.keyCode <= 39)
      ) {
        return;
      }

      // Allow negative sign if configured
      if (
        allowNegative &&
        e.key === "-" &&
        !e.currentTarget.value.includes("-")
      ) {
        return;
      }

      // Ensure that it is a number and stop the keypress
      if (
        (e.shiftKey || e.keyCode < 48 || e.keyCode > 57) &&
        (e.keyCode < 96 || e.keyCode > 105)
      ) {
        e.preventDefault();
      }

      // Call the original onKeyDown if provided
      onKeyDown?.(e);
    };

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
      const value = parseFloat(e.target.value);

      if (!isNaN(value)) {
        if (min !== undefined && value < min) e.target.value = min.toString();
        if (max !== undefined && value > max) e.target.value = max.toString();
      }

      onChange?.(e);
    };

    return (
      <Input
        ref={ref}
        type="number"
        min={min}
        max={max}
        step={step}
        defaultValue={defaultValue}
        onChange={handleChange}
        onKeyDown={handleKeyDown}
        {...props}
      />
    );
  },
);

Input.displayName = "Input";
Textarea.displayName = "Textarea";
SearchInput.displayName = "SearchInput";
NumericInput.displayName = "NumericInput";

export { Input, NumericInput, SearchInput, Textarea };

================
File: src/components/primitive/panel.tsx
================
"use client";

import React from "react";
import { cn } from "../../lib/cn";

interface PanelRowProps extends React.HTMLAttributes<HTMLDivElement> {
  label: string;
  value?: React.ReactNode;
  className?: string;
}

interface PanelProps extends React.HTMLAttributes<HTMLDivElement> {
  title?: string;
  variant?: "default" | "bordered" | "filled";
  innerBorders?: boolean;
  className?: string;
}

const Panel = React.forwardRef<HTMLDivElement, PanelProps>(
  (
    {
      title,
      variant = "default",
      innerBorders = false,
      className,
      children,
      ...props
    },
    ref,
  ) => {
    return (
      <div
        ref={ref}
        className={cn(
          "font-mono text-sm",
          variant === "bordered" && "border border-gray-400",
          variant === "filled" && "bg-gray-50",
          className,
        )}
        {...props}
      >
        {title && (
          <div className="bg-yellow-400 px-2 py-1 font-bold">{title}</div>
        )}
        <div
          className={cn(
            "grid divide-y divide-gray-200",
            innerBorders && "[grid-template-columns:auto_1px_1fr]",
            !innerBorders && "grid-cols-[auto_1fr]",
          )}
        >
          {React.Children.map(children, (child) => {
            if (React.isValidElement<PanelRowProps>(child)) {
              return innerBorders ? (
                <>
                  <div className="px-2 py-1 font-bold text-gray-600">
                    {child.props.label}
                  </div>
                  <div className="bg-gray-200" />
                  <div className="px-2 py-1">{child.props.value}</div>
                </>
              ) : (
                <>
                  <div className="px-2 py-1 font-bold text-gray-600">
                    {child.props.label}
                  </div>
                  <div className="px-2 py-1">{child.props.value}</div>
                </>
              );
            }
            return null;
          })}
        </div>
      </div>
    );
  },
);

const PanelRow = React.forwardRef<HTMLDivElement, PanelRowProps>(
  ({ label, value, className, ...props }, ref) => {
    return null; // Acts as a data container only
  },
);

Panel.displayName = "Panel";
PanelRow.displayName = "PanelRow";

export { Panel, PanelRow };
export type { PanelProps, PanelRowProps };

================
File: src/components/primitive/progress.tsx
================
"use client";
import React from "react";
import { cn } from "../../lib/cn";

export interface ProgressBarProps extends React.HTMLAttributes<HTMLDivElement> {
  value: number;
  max?: number;
  showValue?: boolean;
  size?: "sm" | "md" | "lg";
  variant?: "default" | "terminal";
  status?: "default" | "success" | "warning" | "error";
  className?: string;
}

const ProgressBar = React.forwardRef<HTMLDivElement, ProgressBarProps>(
  (
    {
      value,
      max = 100,
      showValue = true,
      size = "md",
      variant = "default",
      status = "default",
      className,
      ...props
    },
    ref
  ) => {
    const percentage = Math.min(100, Math.max(0, (value / max) * 100));

    return (
      <div
        ref={ref}
        className={cn(
          "w-full font-mono",
          size === "sm" && "h-4",
          size === "md" && "h-6",
          size === "lg" && "h-8",
          className
        )}
        {...props}
      >
        <div
          className={cn(
            "relative h-full w-full overflow-hidden border",
            variant === "default" && "border-gray-200 bg-gray-50",
            variant === "terminal" && "border-green-500 bg-black"
          )}
        >
          <div
            className={cn(
              "h-full transition-all duration-300",
              variant === "default" && [
                status === "default" && "bg-yellow-400",
                status === "success" && "bg-green-500",
                status === "warning" && "bg-orange-500",
                status === "error" && "bg-red-500",
              ],
              variant === "terminal" && "bg-green-500"
            )}
            style={{ width: `${percentage}%` }}
          >
            {showValue && (
              <div
                className={cn(
                  "absolute inset-0 flex h-full w-full items-center justify-end px-2 text-xs",
                  variant === "terminal" ? "text-green-400" : "text-gray-900"
                )}
              >
                {variant === "terminal"
                  ? `${Math.round(percentage)}%`
                  : `${value}/${max}`}
              </div>
            )}
          </div>
        </div>
      </div>
    );
  }
);

export interface MeterProps extends React.HTMLAttributes<HTMLDivElement> {
  value: number;
  min?: number;
  max?: number;
  lowThreshold?: number;
  highThreshold?: number;
  showValue?: boolean;
  variant?: "default" | "terminal";
  size?: "sm" | "md" | "lg";
  label?: string;
  className?: string;
}

const Meter = React.forwardRef<HTMLDivElement, MeterProps>(
  (
    {
      value,
      min = 0,
      max = 100,
      lowThreshold = 33,
      highThreshold = 66,
      showValue = true,
      variant = "default",
      size = "md",
      label,
      className,
      ...props
    },
    ref
  ) => {
    const percentage = Math.min(
      100,
      Math.max(0, ((value - min) / (max - min)) * 100)
    );

    const getStatusColor = () => {
      const normalizedLow = ((lowThreshold - min) / (max - min)) * 100;
      const normalizedHigh = ((highThreshold - min) / (max - min)) * 100;

      if (percentage <= normalizedLow) return "bg-red-500";
      if (percentage <= normalizedHigh) return "bg-yellow-400";
      return "bg-green-500";
    };

    return (
      <div
        ref={ref}
        className={cn(
          "w-full font-mono",
          size === "sm" && "space-y-1 text-xs",
          size === "md" && "space-y-2 text-sm",
          size === "lg" && "space-y-2 text-base",
          className
        )}
        {...props}
      >
        {label && (
          <div
            className={cn(
              "flex justify-between",
              variant === "terminal" && "text-green-400"
            )}
          >
            <span>{label}</span>
            {showValue && <span>{value}</span>}
          </div>
        )}
        <div
          className={cn(
            "relative h-2 w-full overflow-hidden",
            variant === "default" && "border border-gray-200 bg-gray-50",
            variant === "terminal" && "border border-green-500 bg-black"
          )}
        >
          <div
            className={cn(
              "absolute h-full transition-all duration-300",
              variant === "terminal" ? "bg-green-500" : getStatusColor()
            )}
            style={{ width: `${percentage}%` }}
          />
        </div>
        <div
          className={cn(
            "flex justify-between text-xs",
            variant === "terminal" && "text-green-400"
          )}
        >
          <span>{min}</span>
          <span>{max}</span>
        </div>
      </div>
    );
  }
);

ProgressBar.displayName = "ProgressBar";
Meter.displayName = "Meter";

export { Meter, ProgressBar };

================
File: src/components/primitive/select.tsx
================
"use client";
import React from "react";
import { cn } from "../../lib/cn";

export interface SelectProps
  extends Omit<React.SelectHTMLAttributes<HTMLSelectElement>, "prefix"> {
  variant?: "default" | "terminal";
  error?: boolean;
  prefix?: React.ReactNode;
  className?: string;
  wrapperClassName?: string;
}

export interface OptionGroupProps
  extends React.OptgroupHTMLAttributes<HTMLOptGroupElement> {
  className?: string;
}

export interface OptionProps
  extends React.OptionHTMLAttributes<HTMLOptionElement> {
  className?: string;
}

const Select = React.forwardRef<HTMLSelectElement, SelectProps>(
  (
    {
      variant = "default",
      error,
      prefix,
      className,
      wrapperClassName,
      children,
      ...props
    },
    ref,
  ) => {
    const select = (
      <select
        ref={ref}
        className={cn(
          "w-full appearance-none bg-white px-2 py-1 pl-2 pr-8 font-mono text-sm outline-none transition-colors",
          // Base styles by variant
          variant === "default" && [
            "border border-black focus:border-yellow-400",
            "bg-[url('data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20fill%3D%22none%22%20viewBox%3D%220%200%2020%2020%22%3E%3Cpath%20stroke%3D%22%236b7280%22%20stroke-linecap%3D%22round%22%20stroke-linejoin%3D%22round%22%20stroke-width%3D%221.5%22%20d%3D%22m6%208%204%204%204-4%22%2F%3E%3C%2Fsvg%3E')]",
            "bg-[length:20px_20px] bg-[center_right_4px] bg-no-repeat",
          ],
          variant === "terminal" && [
            "border-0 bg-gray-900 text-green-400 focus:bg-black",
            "bg-[url('data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20fill%3D%22none%22%20viewBox%3D%220%200%2020%2020%22%3E%3Cpath%20stroke%3D%22%2334d399%22%20stroke-linecap%3D%22round%22%20stroke-linejoin%3D%22round%22%20stroke-width%3D%221.5%22%20d%3D%22m6%208%204%204%204-4%22%2F%3E%3C%2Fsvg%3E')]",
            "bg-[length:20px_20px] bg-[center_right_4px] bg-no-repeat",
          ],
          // Error state
          error && "border-red-500 focus:border-red-500",
          // Disabled state
          props.disabled && "cursor-not-allowed bg-gray-50 text-gray-500",
          // Remove border radius for prefix
          prefix && "rounded-l-none",
          className,
        )}
        {...props}
      >
        {children}
      </select>
    );

    // If no prefix, return just the select
    if (!prefix) return select;

    // Return select with prefix wrapper
    return (
      <div className={cn("flex font-mono text-sm", wrapperClassName)}>
        <div className="flex items-center border border-r-0 border-gray-600 bg-gray-50 px-2">
          {prefix}
        </div>
        {select}
      </div>
    );
  },
);

const Option = React.forwardRef<HTMLOptionElement, OptionProps>(
  ({ className, ...props }, ref) => {
    return (
      <option ref={ref} className={cn("font-mono", className)} {...props} />
    );
  },
);

const OptionGroup = React.forwardRef<HTMLOptGroupElement, OptionGroupProps>(
  ({ className, ...props }, ref) => {
    return (
      <optgroup ref={ref} className={cn("font-mono", className)} {...props} />
    );
  },
);

Select.displayName = "Select";
Option.displayName = "Option";
OptionGroup.displayName = "OptionGroup";

export { Option, OptionGroup, Select };

================
File: src/components/primitive/split-view.tsx
================
"use client";
import React, { useEffect, useRef, useState } from "react";
import { cn } from "../../lib/cn";

export interface SplitViewProps extends React.HTMLAttributes<HTMLDivElement> {
  direction?: "horizontal" | "vertical";
  defaultSplit?: number; // 0-100
  minSize?: number; // pixels
  variant?: "default" | "terminal";
  separator?: React.ReactNode;
  first: React.ReactNode;
  second: React.ReactNode;
  className?: string;
}

export interface SplitViewPanelProps
  extends React.HTMLAttributes<HTMLDivElement> {
  title?: string;
  variant?: "default" | "terminal";
  className?: string;
}

const SplitViewPanel = React.forwardRef<HTMLDivElement, SplitViewPanelProps>(
  ({ title, variant = "default", className, children, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(
          "flex h-full flex-col font-mono",
          variant === "default" && "border border-gray-200 bg-white",
          variant === "terminal" && "border border-green-500 bg-black",
          className
        )}
        {...props}
      >
        {title && (
          <div
            className={cn(
              "flex items-center border-b px-3 py-2 text-sm font-bold",
              variant === "default" && "border-gray-200 bg-gray-50",
              variant === "terminal" && "border-green-500 text-green-400"
            )}
          >
            {title}
          </div>
        )}
        <div className="flex-1 overflow-auto p-4">{children}</div>
      </div>
    );
  }
);

const SplitView = React.forwardRef<HTMLDivElement, SplitViewProps>(
  (
    {
      direction = "horizontal",
      defaultSplit = 50,
      minSize = 100,
      variant = "default",
      separator,
      first,
      second,
      className,
      ...props
    },
    ref
  ) => {
    const containerRef = useRef<HTMLDivElement>(null);
    const [isResizing, setIsResizing] = useState(false);
    const [split, setSplit] = useState(defaultSplit);

    useEffect(() => {
      setSplit(defaultSplit);
    }, [defaultSplit]);

    const startResize = (e: React.MouseEvent) => {
      e.preventDefault();
      setIsResizing(true);

      const startPos = direction === "horizontal" ? e.clientX : e.clientY;
      const containerSize =
        direction === "horizontal"
          ? containerRef.current?.offsetWidth
          : containerRef.current?.offsetHeight;
      const startSplit = split;

      const handleMouseMove = (e: MouseEvent) => {
        if (!containerSize) return;

        const currentPos = direction === "horizontal" ? e.clientX : e.clientY;
        const containerRect = containerRef.current?.getBoundingClientRect();
        if (!containerRect) return;

        const offset =
          direction === "horizontal"
            ? currentPos - containerRect.left
            : currentPos - containerRect.top;

        const newSplit = Math.min(
          Math.max(
            (offset / containerSize) * 100,
            (minSize / containerSize) * 100
          ),
          100 - (minSize / containerSize) * 100
        );

        setSplit(newSplit);
      };

      const handleMouseUp = () => {
        setIsResizing(false);
        document.removeEventListener("mousemove", handleMouseMove);
        document.removeEventListener("mouseup", handleMouseUp);
      };

      document.addEventListener("mousemove", handleMouseMove);
      document.addEventListener("mouseup", handleMouseUp);
    };

    return (
      <div
        ref={containerRef}
        className={cn(
          "relative flex h-full w-full font-mono",
          direction === "vertical" && "flex-col",
          className
        )}
        {...props}
      >
        {/* First Panel */}
        <div
          className="overflow-hidden"
          style={{
            flexBasis: `${split}%`,
            flexGrow: 0,
            flexShrink: 0,
          }}
        >
          {first}
        </div>

        {/* Resizer */}
        <div
          className={cn(
            "flex items-center justify-center",
            direction === "horizontal"
              ? "cursor-col-resize"
              : "cursor-row-resize",
            variant === "default" && [
              "bg-gray-100 hover:bg-gray-200",
              isResizing && "bg-gray-200",
            ],
            variant === "terminal" && [
              "bg-green-900 bg-opacity-20 hover:bg-opacity-30",
              isResizing && "bg-opacity-30",
            ],
            direction === "horizontal" ? "w-2" : "h-2"
          )}
          onMouseDown={startResize}
        >
          {separator || (
            <div
              className={cn(
                direction === "horizontal" ? "h-8 w-0.5" : "h-0.5 w-8",
                variant === "default" && "bg-gray-300",
                variant === "terminal" && "bg-green-500"
              )}
            />
          )}
        </div>

        {/* Second Panel */}
        <div
          className="overflow-hidden"
          style={{
            flexBasis: `${100 - split}%`,
            flexGrow: 0,
            flexShrink: 0,
          }}
        >
          {second}
        </div>
      </div>
    );
  }
);

SplitViewPanel.displayName = "SplitViewPanel";
SplitView.displayName = "SplitView";

export { SplitView, SplitViewPanel };

================
File: src/components/primitive/status-indicator.tsx
================
"use client";
import React from "react";
import { cn } from "../../lib/cn";

export type StatusType =
  | "idle"
  | "processing"
  | "success"
  | "warning"
  | "error"
  | "offline";

export interface StatusIndicatorProps
  extends React.HTMLAttributes<HTMLDivElement> {
  status: StatusType;
  variant?: "default" | "terminal" | "ring";
  size?: "sm" | "md" | "lg";
  pulse?: boolean;
  label?: string;
  showLabel?: boolean;
  className?: string;
}

export const StatusIndicator = React.forwardRef<
  HTMLDivElement,
  StatusIndicatorProps
>(
  (
    {
      status,
      variant = "default",
      size = "md",
      pulse = false,
      label,
      showLabel = false,
      className,
      ...props
    },
    ref,
  ) => {
    const statusConfig = {
      idle: {
        color: "bg-gray-400",
        terminalColor: "bg-green-800",
        ringColor: "border-gray-400",
        label: label || "Idle",
      },
      processing: {
        color: "bg-blue-500",
        terminalColor: "bg-green-500",
        ringColor: "border-blue-500",
        label: label || "Processing",
      },
      success: {
        color: "bg-green-500",
        terminalColor: "bg-green-400",
        ringColor: "border-green-500",
        label: label || "Success",
      },
      warning: {
        color: "bg-yellow-500",
        terminalColor: "bg-yellow-500",
        ringColor: "border-yellow-500",
        label: label || "Warning",
      },
      error: {
        color: "bg-red-500",
        terminalColor: "bg-red-500",
        ringColor: "border-red-500",
        label: label || "Error",
      },
      offline: {
        color: "bg-gray-300",
        terminalColor: "bg-gray-800",
        ringColor: "border-gray-300",
        label: label || "Offline",
      },
    };

    const sizes = {
      sm: "h-2 w-2",
      md: "h-3 w-3",
      lg: "h-4 w-4",
    };

    const ringSizes = {
      sm: "h-3 w-3 border-[2px]",
      md: "h-4 w-4 border-2",
      lg: "h-5 w-5 border-[3px]",
    };

    return (
      <div
        ref={ref}
        className={cn("inline-flex items-center gap-2 font-mono", className)}
        {...props}
      >
        <div className="relative">
          {/* Main indicator */}
          <div
            className={cn(
              "rounded-full",
              variant === "ring" ? ringSizes[size] : sizes[size],
              variant === "default" && statusConfig[status].color,
              variant === "terminal" && statusConfig[status].terminalColor,
              variant === "ring" && [
                "border",
                statusConfig[status].ringColor,
                "bg-transparent",
              ],
              pulse && [
                "after:absolute after:inset-0",
                "after:rounded-full after:animate-ping",
                variant === "default" && `after:${statusConfig[status].color}`,
                variant === "terminal" &&
                  `after:${statusConfig[status].terminalColor}`,
                "after:opacity-75",
              ],
            )}
          />

          {/* Processing animation for ring variant */}
          {variant === "ring" && status === "processing" && (
            <div
              className={cn(
                "absolute inset-0 rounded-full border-2 border-t-transparent",
                statusConfig[status].ringColor,
                "animate-spin",
              )}
            />
          )}
        </div>

        {/* Label */}
        {showLabel && (
          <span
            className={cn(
              "text-xs",
              variant === "terminal" && "text-green-500",
            )}
          >
            {statusConfig[status].label}
          </span>
        )}
      </div>
    );
  },
);

StatusIndicator.displayName = "StatusIndicator";

================
File: src/components/primitive/switch.tsx
================
// src/components/primitive/switch.tsx
"use client";
import React from "react";
import { cn } from "../../lib/cn";

type SwitchSize = "sm" | "md" | "lg";
type SwitchVariant = "default" | "terminal";

export interface SwitchProps
  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, "type" | "size"> {
  variant?: SwitchVariant;
  size?: SwitchSize;
  error?: boolean;
  className?: string;
  label?: string;
}

const Switch = React.forwardRef<HTMLInputElement, SwitchProps>(
  (
    {
      variant = "default",
      size = "md",
      error,
      className,
      disabled,
      label,
      ...props
    },
    ref,
  ) => {
    return (
      <label
        className={cn(
          "relative inline-flex cursor-pointer items-center gap-3",
          disabled && "cursor-not-allowed opacity-50",
          className,
        )}
      >
        <input
          ref={ref}
          type="checkbox"
          className="peer sr-only"
          disabled={disabled}
          {...props}
        />
        <div
          className={cn(
            "relative",
            // Size variations
            size === "sm" && "h-4 w-7",
            size === "md" && "h-5 w-9",
            size === "lg" && "h-6 w-11",
            // Base styles
            "rounded-full transition-colors",
            "after:absolute after:rounded-full after:bg-white after:transition-transform",
            // After element sizing
            size === "sm" &&
              "after:h-3 after:w-3 after:left-0.5 after:top-[50%] after:-translate-y-1/2",
            size === "md" &&
              "after:h-4 after:w-4 after:left-0.5 after:top-[50%] after:-translate-y-1/2",
            size === "lg" &&
              "after:h-5 after:w-5 after:left-0.5 after:top-[50%] after:-translate-y-1/2",
            // Peer styles
            "peer-checked:after:translate-x-full",
            // Variant styles
            variant === "default" && [
              "border border-gray-200 bg-gray-100",
              "peer-checked:bg-yellow-400 peer-checked:border-yellow-400",
              "peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-yellow-300",
              error && "border-red-500 peer-focus:ring-red-300",
            ],
            variant === "terminal" && [
              "border border-green-500 bg-black",
              "peer-checked:bg-green-900 peer-checked:bg-opacity-20",
              "peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-green-900 peer-focus:ring-opacity-20",
              error &&
                "border-red-500 peer-focus:ring-red-900 peer-focus:ring-opacity-20",
            ],
          )}
        />
        {label && (
          <span
            className={cn(
              "text-sm",
              variant === "terminal" && "text-green-400",
              disabled && "text-gray-500",
            )}
          >
            {label}
          </span>
        )}
      </label>
    );
  },
);

Switch.displayName = "Switch";

export { Switch };

================
File: src/components/primitive/table.tsx
================
"use client";
import React from "react";
import { cn } from "../../lib/cn";

export interface TableProps
  extends React.TableHTMLAttributes<HTMLTableElement> {
  minimal?: boolean;
  dense?: boolean;
  className?: string;
}

export interface TableHeaderProps
  extends React.HTMLAttributes<HTMLTableSectionElement> {
  className?: string;
}

export interface TableBodyProps
  extends React.HTMLAttributes<HTMLTableSectionElement> {
  className?: string;
}

export interface TableRowProps
  extends React.HTMLAttributes<HTMLTableRowElement> {
  highlighted?: boolean;
  className?: string;
}

export interface TableCellProps
  extends React.TdHTMLAttributes<HTMLTableCellElement> {
  monospace?: boolean;
  className?: string;
}

export interface TableHeaderCellProps
  extends React.ThHTMLAttributes<HTMLTableHeaderCellElement> {
  sorted?: "asc" | "desc";
  className?: string;
}

const Table = React.forwardRef<HTMLTableElement, TableProps>(
  ({ minimal, dense, className, ...props }, ref) => {
    return (
      <table
        ref={ref}
        className={cn(
          "w-full border-collapse font-mono text-sm",
          minimal ? "border-0" : "border border-gray-200",
          dense ? "text-xs" : "text-sm",
          className
        )}
        {...props}
      />
    );
  }
);

const TableHeader = React.forwardRef<HTMLTableSectionElement, TableHeaderProps>(
  ({ className, ...props }, ref) => {
    return (
      <thead
        ref={ref}
        className={cn("bg-gray-100 uppercase tracking-wider", className)}
        {...props}
      />
    );
  }
);

const TableBody = React.forwardRef<HTMLTableSectionElement, TableBodyProps>(
  ({ className, ...props }, ref) => {
    return <tbody ref={ref} className={cn("", className)} {...props} />;
  }
);

const TableRow = React.forwardRef<HTMLTableRowElement, TableRowProps>(
  ({ highlighted, className, ...props }, ref) => {
    return (
      <tr
        ref={ref}
        className={cn(
          "border-t border-gray-200 hover:bg-gray-50",
          highlighted && "bg-yellow-50",
          className
        )}
        {...props}
      />
    );
  }
);

const TableCell = React.forwardRef<HTMLTableCellElement, TableCellProps>(
  ({ monospace, className, ...props }, ref) => {
    return (
      <td
        ref={ref}
        className={cn("p-2", monospace && "font-mono", className)}
        {...props}
      />
    );
  }
);

const TableHeaderCell = React.forwardRef<
  HTMLTableHeaderCellElement,
  TableHeaderCellProps
>(({ sorted, className, children, ...props }, ref) => {
  return (
    <th
      ref={ref}
      className={cn(
        "p-2 text-left font-bold",
        sorted && "cursor-pointer hover:bg-gray-200",
        className
      )}
      {...props}
    >
      <div className="flex items-center gap-1">
        {children}
        {sorted && (
          <span className="text-gray-400">{sorted === "asc" ? "↑" : "↓"}</span>
        )}
      </div>
    </th>
  );
});

Table.displayName = "Table";
TableHeader.displayName = "TableHeader";
TableBody.displayName = "TableBody";
TableRow.displayName = "TableRow";
TableCell.displayName = "TableCell";
TableHeaderCell.displayName = "TableHeaderCell";

export { Table, TableBody, TableCell, TableHeader, TableHeaderCell, TableRow };

================
File: src/components/primitive/tabs.tsx
================
"use client";
import React from "react";
import { cn } from "../../lib/cn";

export interface TabsProps extends React.HTMLAttributes<HTMLDivElement> {
  defaultValue?: string;
  value?: string;
  onValueChange?: (value: string) => void;
  variant?: "default" | "terminal";
  fullWidth?: boolean;
  className?: string;
}

export interface TabListProps extends React.HTMLAttributes<HTMLDivElement> {
  className?: string;
}

export interface TabProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  value: string;
  disabled?: boolean;
  className?: string;
}

export interface TabPanelProps extends React.HTMLAttributes<HTMLDivElement> {
  value: string;
  className?: string;
}

type TabsContextValue = {
  value?: string;
  onValueChange?: (value: string) => void;
  variant?: "default" | "terminal";
};

const TabsContext = React.createContext<TabsContextValue>({});

export const Tabs = React.forwardRef<HTMLDivElement, TabsProps>(
  (
    {
      defaultValue,
      value: controlledValue,
      onValueChange,
      variant = "default",
      fullWidth = false,
      className,
      children,
      ...props
    },
    ref,
  ) => {
    const [value, setValue] = React.useState(defaultValue);
    const currentValue = controlledValue ?? value;

    const handleValueChange = (newValue: string) => {
      setValue(newValue);
      onValueChange?.(newValue);
    };

    return (
      <TabsContext.Provider
        value={{
          value: currentValue,
          onValueChange: handleValueChange,
          variant,
        }}
      >
        <div
          ref={ref}
          className={cn("font-mono", fullWidth && "w-full", className)}
          {...props}
        >
          {children}
        </div>
      </TabsContext.Provider>
    );
  },
);

export const TabList = React.forwardRef<HTMLDivElement, TabListProps>(
  ({ className, children, ...props }, ref) => {
    const { variant } = React.useContext(TabsContext);

    return (
      <div
        ref={ref}
        role="tablist"
        className={cn(
          "flex border-b text-sm",
          variant === "default" && "border-gray-200",
          variant === "terminal" && "border-green-500",
          className,
        )}
        {...props}
      >
        {children}
      </div>
    );
  },
);

export const Tab = React.forwardRef<HTMLButtonElement, TabProps>(
  ({ value, disabled, className, children, ...props }, ref) => {
    const {
      value: selectedValue,
      onValueChange,
      variant,
    } = React.useContext(TabsContext);
    const isSelected = selectedValue === value;

    return (
      <button
        ref={ref}
        role="tab"
        aria-selected={isSelected}
        disabled={disabled}
        onClick={() => onValueChange?.(value)}
        className={cn(
          "relative px-4 py-2 text-sm font-medium transition-colors",
          variant === "default" && [
            "text-gray-600 hover:text-gray-900",
            isSelected && "text-gray-900",
            disabled && "cursor-not-allowed text-gray-400 hover:text-gray-400",
          ],
          variant === "terminal" && [
            "text-green-400 hover:text-green-300",
            isSelected && "text-green-300",
            disabled &&
              "cursor-not-allowed text-green-800 hover:text-green-800",
          ],
          className,
        )}
        {...props}
      >
        {children}
        {/* Selected indicator */}
        {isSelected && (
          <div
            className={cn(
              "absolute bottom-0 left-0 h-0.5 w-full",
              variant === "default" && "bg-yellow-400",
              variant === "terminal" && "bg-green-500",
            )}
          />
        )}
      </button>
    );
  },
);

export const TabPanel = React.forwardRef<HTMLDivElement, TabPanelProps>(
  ({ value, className, children, ...props }, ref) => {
    const { value: selectedValue } = React.useContext(TabsContext);
    const isSelected = selectedValue === value;

    if (!isSelected) return null;

    return (
      <div
        ref={ref}
        role="tabpanel"
        className={cn("p-4", className)}
        {...props}
      >
        {children}
      </div>
    );
  },
);

Tabs.displayName = "Tabs";
TabList.displayName = "TabList";
Tab.displayName = "Tab";
TabPanel.displayName = "TabPanel";

================
File: src/components/primitive/terminal.tsx
================
"use client";
import React, { useEffect, useRef, useState } from "react";
import { cn } from "../../lib/cn";

export interface TerminalProps extends React.HTMLAttributes<HTMLDivElement> {
  title?: string;
  lines?: string[];
  loading?: boolean;
  maxHeight?: string;
  highlightLines?: number[];
  className?: string;
}

export interface TerminalLineProps
  extends React.HTMLAttributes<HTMLDivElement> {
  prefix?: string;
  content: string;
  highlight?: boolean;
  timestamp?: boolean;
  className?: string;
}

const TerminalLine = React.forwardRef<HTMLDivElement, TerminalLineProps>(
  (
    { prefix = "$", content, highlight, timestamp, className, ...props },
    ref,
  ) => {
    return (
      <div
        ref={ref}
        className={cn(
          "flex gap-2 font-mono text-sm text-gray-300",
          highlight && "bg-gray-700 bg-opacity-50",
          className,
        )}
        {...props}
      >
        {timestamp && (
          <span className="shrink-0 text-gray-500">
            {new Date().toLocaleTimeString()}
          </span>
        )}
        <span className="shrink-0 text-gray-500">{prefix}</span>
        <span className="break-all">{content}</span>
      </div>
    );
  },
);

const Terminal = React.forwardRef<HTMLDivElement, TerminalProps>(
  (
    {
      title = "Terminal",
      lines = [],
      loading,
      maxHeight = "24rem",
      highlightLines = [],
      className,
      ...props
    },
    ref,
  ) => {
    const scrollRef = useRef<HTMLDivElement>(null);
    const [scrolled, setScrolled] = useState(false);

    useEffect(() => {
      if (!scrolled && scrollRef.current) {
        scrollRef.current.scrollTop = scrollRef.current.scrollHeight;
      }
    }, [lines, scrolled]);

    const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {
      const { scrollTop, scrollHeight, clientHeight } = e.currentTarget;
      const isScrolledToBottom = scrollHeight - (scrollTop + clientHeight) < 1;
      setScrolled(!isScrolledToBottom);
    };

    return (
      <div
        ref={ref}
        className={cn(
          "w-full overflow-hidden rounded-md border border-gray-700 bg-gray-900 font-mono shadow-sm",
          className,
        )}
        {...props}
      >
        {/* Terminal Header */}
        <div className="flex items-center justify-between border-b border-gray-700 bg-gray-800 px-3 py-2">
          <div className="text-sm text-gray-300">{title}</div>
          <div className="flex items-center gap-2">
            <div className="h-2.5 w-2.5 rounded-full bg-gray-600"></div>
            <div className="h-2.5 w-2.5 rounded-full bg-gray-600"></div>
            <div className="h-2.5 w-2.5 rounded-full bg-gray-600"></div>
          </div>
        </div>

        {/* Terminal Content */}
        <div
          ref={scrollRef}
          className="overflow-auto p-3"
          style={{ maxHeight }}
          onScroll={handleScroll}
        >
          {lines.map((line, index) => (
            <TerminalLine
              key={index}
              content={line}
              highlight={highlightLines.includes(index)}
              prefix={line.startsWith(">") ? ">" : "$"}
            />
          ))}
          {loading && (
            <TerminalLine content="" prefix="$" className="animate-pulse" />
          )}
        </div>

        {/* Terminal Footer */}
        <div className="flex items-center justify-between border-t border-gray-700 bg-gray-800 px-3 py-2 text-xs text-gray-500">
          <span>{lines.length} lines</span>
          <span>{scrolled ? "Scrolled" : "End"}</span>
        </div>
      </div>
    );
  },
);

TerminalLine.displayName = "TerminalLine";
Terminal.displayName = "Terminal";

export { Terminal, TerminalLine };

================
File: src/components/primitive/time-series.tsx
================
// src/components/primitive/time-series.tsx
"use client";
import {
    CategoryScale,
    ChartData,
    Chart as ChartJS,
    ChartOptions,
    Filler,
    Legend,
    LinearScale,
    LineElement,
    PointElement,
    Title,
    Tooltip,
} from "chart.js";
import { format } from "date-fns";
import React, { useMemo } from "react"; // Remove useState
import { Line } from "react-chartjs-2";
import { cn } from "../../lib/cn";

// Register ChartJS components
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  Filler
);

export interface TimeSeriesData {
  timestamp: Date;
  value: number;
}

export interface TimeSeriesProps {
  data: TimeSeriesData[] | TimeSeriesData[][];
  labels?: string[];
  title?: string;
  height?: number;
  variant?: "default" | "terminal";
  showLegend?: boolean;
  fill?: boolean;
  realtime?: boolean;
  maxDataPoints?: number;
  yAxisLabel?: string;
  className?: string;
}

export const TimeSeries = React.forwardRef<HTMLDivElement, TimeSeriesProps>(
  (
    {
      data,
      labels = ["Value"],
      title,
      height = 300,
      variant = "default",
      showLegend = true,
      fill = false,
      realtime = false,
      maxDataPoints = 50,
      yAxisLabel,
      className,
    },
    ref
  ) => {
    // Process data into chart format using useMemo
    const chartData: ChartData<"line", number[], string> = useMemo(() => {
      const isMultiSeries = Array.isArray(data[0]);
      const series = isMultiSeries
        ? (data as TimeSeriesData[][])
        : [data as TimeSeriesData[]];

      return {
        labels: series[0].map((point) => format(point.timestamp, "HH:mm:ss")),
        datasets: series.map((seriesData, index) => ({
          label: labels[index] || `Series ${index + 1}`,
          data: seriesData.map((point) => point.value),
          borderColor:
            variant === "terminal"
              ? `hsl(${(index * 60) % 360}, 100%, 50%)`
              : `hsl(${(index * 120) % 360}, 70%, 50%)`,
          backgroundColor:
            variant === "terminal"
              ? `hsla(${(index * 60) % 360}, 100%, 50%, 0.1)`
              : `hsla(${(index * 120) % 360}, 70%, 50%, 0.1)`,
          tension: 0.4,
          fill: fill,
        })),
      };
    }, [data, labels, variant, fill]);

    // Chart options
    const options: ChartOptions<"line"> = useMemo(
      () => ({
        responsive: true,
        maintainAspectRatio: false,
        animation: {
          duration: realtime ? 0 : 750,
        },
        plugins: {
          legend: {
            display: showLegend,
            position: "top" as const,
            labels: {
              color: variant === "terminal" ? "#10B981" : undefined,
              font: {
                family:
                  "Menlo, Monaco, Consolas, 'Liberation Mono', monospace",
              },
            },
          },
          title: {
            display: !!title,
            text: title,
            color: variant === "terminal" ? "#10B981" : undefined,
            font: {
              family:
                "Menlo, Monaco, Consolas, 'Liberation Mono', monospace",
              size: 14,
            },
          },
          tooltip: {
            backgroundColor: variant === "terminal" ? "#000" : undefined,
            borderColor: variant === "terminal" ? "#10B981" : undefined,
            borderWidth: variant === "terminal" ? 1 : 0,
            titleColor: variant === "terminal" ? "#10B981" : undefined,
            bodyColor: variant === "terminal" ? "#10B981" : undefined,
            bodyFont: {
              family:
                "Menlo, Monaco, Consolas, 'Liberation Mono', monospace",
            },
            titleFont: {
              family:
                "Menlo, Monaco, Consolas, 'Liberation Mono', monospace",
            },
          },
        },
        scales: {
          x: {
            grid: {
              color:
                variant === "terminal"
                  ? "rgba(16, 185, 129, 0.1)"
                  : "rgba(0, 0, 0, 0.1)",
            },
            ticks: {
              color: variant === "terminal" ? "#10B981" : undefined,
              font: {
                family:
                  "Menlo, Monaco, Consolas, 'Liberation Mono', monospace",
              },
            },
          },
          y: {
            grid: {
              color:
                variant === "terminal"
                  ? "rgba(16, 185, 129, 0.1)"
                  : "rgba(0, 0, 0, 0.1)",
            },
            ticks: {
              color: variant === "terminal" ? "#10B981" : undefined,
              font: {
                family:
                  "Menlo, Monaco, Consolas, 'Liberation Mono', monospace",
              },
            },
            title: {
              display: !!yAxisLabel,
              text: yAxisLabel,
              color: variant === "terminal" ? "#10B981" : undefined,
              font: {
                family:
                  "Menlo, Monaco, Consolas, 'Liberation Mono', monospace",
              },
            },
          },
        },
      }),
      [
        realtime,
        showLegend,
        variant,
        title,
        yAxisLabel,
      ]
    );

    return (
      <div
        ref={ref}
        className={cn(
          "w-full rounded",
          variant === "default" && "border border-gray-200 bg-white p-4",
          variant === "terminal" && "border border-green-500 bg-black p-4",
          className
        )}
        style={{ height }}
      >
        <Line data={chartData} options={options} />
      </div>
    );
  }
);

TimeSeries.displayName = "TimeSeries";

================
File: src/components/primitive/toast.tsx
================
"use client";
import React, { useEffect, useState } from "react";
import { createPortal } from "react-dom";
import { cn } from "../../lib/cn";

export type ToastType = "info" | "success" | "warning" | "error";

export interface Toast {
  id: string;
  type: ToastType;
  title: string;
  message?: string;
  duration?: number;
  isPersistent?: boolean;
}

export interface ToastProps extends Toast {
  onClose: (id: string) => void;
  variant?: "default" | "terminal";
}

export interface ToastProviderProps {
  children: React.ReactNode;
  variant?: "default" | "terminal";
}

interface ToastContextValue {
  showToast: (toast: Omit<Toast, "id">) => void;
  closeToast: (id: string) => void;
}

export const ToastContext = React.createContext<ToastContextValue>({
  showToast: () => {},
  closeToast: () => {},
});

const ToastComponent = React.forwardRef<HTMLDivElement, ToastProps>(
  (
    {
      id,
      type,
      title,
      message,
      duration = 5000,
      isPersistent = false,
      variant = "default",
      onClose,
    },
    ref,
  ) => {
    const [isClosing, setIsClosing] = useState(false);
    const [progress, setProgress] = useState(100);

    useEffect(() => {
      if (isPersistent) return;

      const startTime = Date.now();
      const endTime = startTime + duration;

      const progressInterval = setInterval(() => {
        const now = Date.now();
        const remaining = Math.max(0, endTime - now);
        const newProgress = (remaining / duration) * 100;

        if (newProgress <= 0) {
          clearInterval(progressInterval);
          setIsClosing(true);
          setTimeout(() => onClose(id), 200);
        } else {
          setProgress(newProgress);
        }
      }, 100);

      return () => clearInterval(progressInterval);
    }, [duration, id, isPersistent, onClose]);

    const typeStyles = {
      info: {
        default: "border-blue-500 bg-blue-50",
        terminal: "border-blue-500 bg-black text-blue-400",
        icon: "ℹ",
      },
      success: {
        default: "border-green-500 bg-green-50",
        terminal: "border-green-500 bg-black text-green-400",
        icon: "✓",
      },
      warning: {
        default: "border-yellow-500 bg-yellow-50",
        terminal: "border-yellow-500 bg-black text-yellow-400",
        icon: "⚠",
      },
      error: {
        default: "border-red-500 bg-red-50",
        terminal: "border-red-500 bg-black text-red-400",
        icon: "✕",
      },
    };

    return (
      <div
        ref={ref}
        className={cn(
          "relative mb-2 w-96 overflow-hidden border font-mono text-sm shadow-lg transition-all duration-200",
          variant === "default" && typeStyles[type].default,
          variant === "terminal" && typeStyles[type].terminal,
          isClosing && "translate-x-full opacity-0",
        )}
      >
        {/* Progress bar */}
        {!isPersistent && (
          <div
            className={cn(
              "absolute bottom-0 left-0 h-0.5 transition-all duration-100",
              variant === "default" && "bg-gray-300",
              variant === "terminal" && "bg-gray-600",
            )}
            style={{ width: `${progress}%` }}
          />
        )}

        <div className="flex items-start gap-3 p-3">
          {/* Icon */}
          <div className="pt-0.5 text-lg">{typeStyles[type].icon}</div>

          {/* Content */}
          <div className="flex-1 space-y-1">
            <div className="font-bold">{title}</div>
            {message && <div className="text-sm opacity-90">{message}</div>}
          </div>

          {/* Close button */}
          <button
            onClick={() => {
              setIsClosing(true);
              setTimeout(() => onClose(id), 200);
            }}
            className={cn(
              "ml-auto -mr-1 flex h-6 w-6 items-center justify-center rounded-sm transition-colors",
              variant === "default" && "hover:bg-black hover:bg-opacity-5",
              variant === "terminal" && "hover:bg-white hover:bg-opacity-5",
            )}
          >
            ×
          </button>
        </div>
      </div>
    );
  },
);

export const ToastProvider: React.FC<ToastProviderProps> = ({
  children,
  variant = "default",
}) => {
  const [toasts, setToasts] = useState<Toast[]>([]);
  const [isMounted, setIsMounted] = useState(false);

  useEffect(() => {
    setIsMounted(true);
  }, []);

  const showToast = (toast: Omit<Toast, "id">) => {
    const id = Math.random().toString(36).substr(2, 9);
    setToasts((prev) => [...prev, { ...toast, id }]);
  };

  const closeToast = (id: string) => {
    setToasts((prev) => prev.filter((toast) => toast.id !== id));
  };

  return (
    <ToastContext.Provider value={{ showToast, closeToast }}>
      {children}
      {isMounted &&
        createPortal(
          <div className="fixed right-0 top-0 z-50 m-4 flex flex-col items-end">
            {toasts.map((toast) => (
              <ToastComponent
                key={toast.id}
                {...toast}
                variant={variant}
                onClose={closeToast}
              />
            ))}
          </div>,
          document.body,
        )}
    </ToastContext.Provider>
  );
};

export const useToast = () => {
  const context = React.useContext(ToastContext);
  if (!context) {
    throw new Error("useToast must be used within a ToastProvider");
  }
  return context;
};

ToastComponent.displayName = "Toast";

================
File: src/components/primitive/tooltip.tsx
================
"use client";
import React, { useState } from "react";
import { cn } from "../../lib/cn";

export interface TooltipProps {
  content: React.ReactNode;
  side?: "top" | "right" | "bottom" | "left";
  align?: "start" | "center" | "end";
  variant?: "default" | "terminal";
  className?: string;
  children: React.ReactElement<any>; // Update children type
}

export const Tooltip = ({
  content,
  side = "top",
  align = "center",
  variant = "default",
  className,
  children,
}: TooltipProps) => {
  const [show, setShow] = useState(false);

  const positions = {
    top: {
      start: "bottom-full left-0 mb-2",
      center: "bottom-full left-1/2 -translate-x-1/2 mb-2",
      end: "bottom-full right-0 mb-2",
    },
    right: {
      start: "left-full top-0 ml-2",
      center: "left-full top-1/2 -translate-y-1/2 ml-2",
      end: "left-full bottom-0 ml-2",
    },
    bottom: {
      start: "top-full left-0 mt-2",
      center: "top-full left-1/2 -translate-x-1/2 mt-2",
      end: "top-full right-0 mt-2",
    },
    left: {
      start: "right-full top-0 mr-2",
      center: "right-full top-1/2 -translate-y-1/2 mr-2",
      end: "right-full bottom-0 mr-2",
    },
  };

  const arrows = {
    top: "bottom-[-4px] border-t-gray-900 border-l-transparent border-r-transparent border-b-transparent",
    right:
      "left-[-4px] border-r-gray-900 border-t-transparent border-b-transparent border-l-transparent",
    bottom:
      "top-[-4px] border-b-gray-900 border-l-transparent border-r-transparent border-t-transparent",
    left: "right-[-4px] border-l-gray-900 border-t-transparent border-b-transparent border-r-transparent",
  };

  const arrowAlignments = {
    start: "left-2",
    center: "left-1/2 -translate-x-1/2",
    end: "right-2",
  };

  return (
    <div className="relative inline-block">
      {React.cloneElement(children, {
        onMouseEnter: () => setShow(true),
        onMouseLeave: () => setShow(false),
      } as React.HTMLAttributes<HTMLElement>)}{" "}
      {show && (
        <div
          className={cn(
            "absolute z-50 whitespace-nowrap rounded px-2 py-1 text-sm",
            variant === "default" && "bg-gray-900 text-white",
            variant === "terminal" &&
              "border border-green-500 bg-black text-green-400",
            positions[side][align],
            className
          )}
        >
          {content}
          <div
            className={cn(
              "absolute border-4",
              variant === "default" && arrows[side],
              variant === "terminal" && "border-green-500",
              arrowAlignments[align]
            )}
          />
        </div>
      )}
    </div>
  );
};

Tooltip.displayName = "Tooltip";

================
File: src/lib/cn.ts
================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

================
File: src/styles/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: src/index.ts
================
// src/index.ts
export * from "./components/primitive/accordion";
export * from "./components/primitive/badge";
export * from "./components/primitive/breadcrumbs";
export * from "./components/primitive/button";
export * from "./components/primitive/command-bar";
export * from "./components/primitive/datagrid";
export * from "./components/primitive/dialog";
export * from "./components/primitive/form";
export * from "./components/primitive/header";
export * from "./components/primitive/input";
export * from "./components/primitive/panel";
export * from "./components/primitive/progress";
export * from "./components/primitive/select";
export * from "./components/primitive/split-view";
export * from "./components/primitive/status-indicator";
export * from "./components/primitive/switch";
export * from "./components/primitive/table";
export * from "./components/primitive/tabs";
export * from "./components/primitive/terminal";
export * from "./components/primitive/time-series";
export * from "./components/primitive/toast";
export * from "./components/primitive/tooltip";

// Export utilities
export * from "./lib/cn";

================
File: .gitignore
================
/node_modules
/dist
/examples/next-app/node_modules

================
File: .repomixignore
================
# Add patterns to ignore here, one per line
# Example:
# *.log
# tmp/
dist/
node_modules/
examples/next-app/node_modules/
src/stories/

================
File: package.json
================
{
  "name": "industrydb",
  "version": "1.0.0",
  "private": false,
  "workspaces": [
    "examples/*"
  ],
  "main": "dist/index.js",
  "module": "dist/index.mjs",
  "types": "dist/index.d.ts",
  "files": [
    "dist",
    "plugin.js"
  ],
  "scripts": {
    "dev:lib": "tsup --watch",
    "build": "tsup",
    "dev": "concurrently \"npm run dev:lib\" \"npm run storybook\"",
    "demo:next": "npm run dev --workspace=examples/next-app",
    "demo:storybook": "npm run dev",
    "release": "npm run build && changeset publish",
    "repomix": "repomix --ignore \"examples/next-app/node_modules/\"",
    "docs": "ts-node scripts/generate-docs.ts",
    "build-storybook": "storybook build",
    "storybook": "storybook dev -p 6006"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "autoprefixer": "^10.4.20",
    "chart.js": "^4.4.7",
    "clsx": "^2.1.1",
    "concurrently": "^9.1.2",
    "date-fns": "^4.1.0",
    "postcss": "^8.5.1",
    "react": "^19.0.0",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "^19.0.0",
    "tailwind-merge": "^2.6.0"
  },
  "devDependencies": {
    "@changesets/cli": "^2.27.11",
    "@chromatic-com/storybook": "^3.2.3",
    "@storybook/addon-docs": "^8.4.7",
    "@storybook/addon-essentials": "^8.4.7",
    "@storybook/addon-interactions": "^8.4.7",
    "@storybook/addon-onboarding": "^8.4.7",
    "@storybook/addon-styling-webpack": "^1.0.1",
    "@storybook/blocks": "^8.4.7",
    "@storybook/react": "^8.4.7",
    "@storybook/react-vite": "^8.4.7",
    "@storybook/test": "^8.4.7",
    "@types/node": "^22.10.6",
    "@types/react": "^19.0.7",
    "@types/react-dom": "^19.0.3",
    "storybook": "^8.4.7",
    "tailwindcss": "^3.4.17",
    "tsup": "^8.3.5",
    "typescript": "^5.7.3"
  }
}

================
File: plugin.js
================
const plugin = require("tailwindcss/plugin");

module.exports = plugin(
  function ({ addBase, addComponents, addUtilities }) {},
  {
    theme: {
      extend: {
        fontFamily: {
          mono: ["Menlo", "Monaco", "Consolas", "Liberation Mono", "monospace"],
        },
        boxShadow: {
          sharp: "4px 4px 0px 0px rgba(0, 0, 0, 1)",
          "sharp-sm": "2px 2px 0px 0px rgba(0, 0, 0, 1)",
          "sharp-lg": "6px 6px 0px 0px rgba(0, 0, 0, 1)",
          "sharp-primary": "4px 4px 0px 0px var(--primary-color)",
          "sharp-success": "4px 4px 0px 0px var(--success-color)",
        },
      },
    },
  },
);

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

================
File: README.md
================
# IndustryDB

A modern React component library for building industrial and enterprise applications.

## Features

- 📱 Fully responsive components
- 🎨 Customizable themes with Tailwind CSS
- 🌙 Dark mode support
- ⌨️ Keyboard accessibility
- 📦 Tree-shakeable components
- 💡 Terminal-style UI variations
- 🔧 Industrial-focused components (DataGrid, TimeSeries, Terminal, etc.)

## Installation

```bash
npm install industrydb
```

## Quick Start

```jsx
import { Button, DataGrid, Header } from 'industrydb';
import 'industrydb/styles.css';

function App() {
  return (
    <div>
      <Header title="Dashboard" />
      <Button variant="primary">New Process</Button>
      <DataGrid
        columns={[
          { key: 'id', header: 'ID' },
          { key: 'name', header: 'Name' },
        ]}
        data={[
          { id: 1, name: 'Process 1' },
          { id: 2, name: 'Process 2' },
        ]}
      />
    </div>
  );
}
```

## Documentation

Visit our [documentation site](https://industrydb-docs.vercel.app) for:
- Component API references
- Examples and use cases
- Theme customization
- Accessibility guidelines

## Examples

Check out our example applications:
- [Next.js Demo](./examples/next-app)
- [Storybook](https://industrydb-storybook.vercel.app)

## Development

```bash
# Install dependencies
npm install

# Start development environment
npm run dev

# Run Next.js demo
npm run demo:next

# Run Storybook
npm run demo:storybook

# Build package
npm run build
```

## Contributing

We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.

## License

MIT © [Your Name]

================
File: repomix.config.json
================
{
  "output": {
    "filePath": "repomix-output.txt",
    "style": "plain",
    "removeComments": false,
    "removeEmptyLines": false,
    "topFilesLength": 5,
    "showLineNumbers": false,
    "copyToClipboard": false
  },
  "include": [],
  "ignore": {
    "useGitignore": true,
    "useDefaultPatterns": true,
    "customPatterns": []
  },
  "security": {
    "enableSecurityCheck": true
  }
}

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ["./src/**/*.{ts,tsx}"],
  theme: {
    extend: {
      fontFamily: {
        mono: ["Menlo", "Monaco", "Consolas", "Liberation Mono", "monospace"],
      },
      boxShadow: {
        sharp: "4px 4px 0px 0px rgba(0, 0, 0, 1)",
        "sharp-sm": "2px 2px 0px 0px rgba(0, 0, 0, 1)",
        "sharp-lg": "6px 6px 0px 0px rgba(0, 0, 0, 1)",
        "sharp-primary": "4px 4px 0px 0px var(--primary-color)",
        "sharp-success": "4px 4px 0px 0px var(--success-color)",
      },
    },
  },
  plugins: [],
};

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "module": "esnext",
    "moduleResolution": "node",
    "jsx": "react-jsx",
    "resolveJsonModule": true,
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true,
    "outDir": "dist",
    "strict": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "isolatedModules": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src/**/*.ts", "src/**/*.tsx"],
  "exclude": ["node_modules", "dist", "examples"]
}

================
File: tsup.config.ts
================
import { copyFile } from "node:fs";
import { defineConfig } from "tsup";

export default defineConfig({
  entry: ["src/index.ts"],
  format: ["cjs", "esm"],
  dts: true,
  splitting: false,
  sourcemap: true,
  clean: true,
  external: ["react", "react-dom"],
  injectStyle: true,
  esbuildOptions(options) {
    options.banner = {
      js: '"use client";',
    };
  },
  async onSuccess() {
    copyFile("plugin.js", "dist/plugin.js", (err) => {
      if (err) {
        console.error(err);
      }
    });
  },
});
